{
    "collab_server" : "",
    "contents" : "source(\"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/R Code/Plotting Trajectories post Jan 2016/Plotting_Trajectores_Project_2016/B_Trajectories.R\")\nsource(\"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/R Code/Plotting Trajectories post Jan 2016/Plotting_Trajectores_Project_2016/F_Trajectories.R\")\nsource(\"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/R Code/Plotting Trajectories post Jan 2016/Plotting_Trajectores_Project_2016/Value_Trajectories.R\")\nsource(\"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/R Code/Plotting Trajectories post Jan 2016/Plotting_Trajectores_Project_2016/Effort_Trajectories.R\")\nsource(\"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/R Code/Plotting Trajectories post Jan 2016/Plotting_Trajectores_Project_2016/ChokePie.R\")\nsource(\"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/R Code/Plotting Trajectories post Jan 2016/Plotting_Trajectores_Project_2016/HighestValuePie.R\")\nsource(\"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/R Code/Plotting Trajectories post Jan 2016/Plotting_Trajectores_Project_2016/plot_tools.R\")\nsource(\"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/R Code/Plotting Trajectories post Jan 2016/Plotting_Trajectores_Project_2016/share_tools.R\")\n\nplot_type = function(type2plot) {\n  \n  create.plot.dirs()\n  \n  params = initialise_params()\n  \n  #OBSELETE ================================================================================================\n  #mods  <- (unique(results$Model))                  # 294 models\n  #gnames<- as.character(unique(results$GroupName))# 77 groups: 1=Baleen whales, 65=Phytoplankton. 66-77 fleets, n-1 AllGroups, n AllFleets\n  #gnames<- as.character(results$GroupName[c(14,18,16,29,31)])\n  #gnames<- c(gnames, \"AllGroups\", \"AllFleets\")\n  #vars  <- as.character(unique(results$Variable)) # 6 Variables: \"BiomassMin\" \"BiomassEnd\" \"Landings\" \"DiscardMortalities\" \"DiscardSurvivals\" \"TotalEndValue\"\n  #OBSELETE ================================================================================================\n\n  #OBSELETE ================================================================================================\n  ###Trajectories by MODEL run\n  #m<-mods[1]\n  #read a model\n  #setwd(paste(params$RootPath,\"\\\\Biomass\",sep=''))\n  #biomass.filenames = list.files(\"Biomass\")\n  \n  #path<-paste(\"Biomass\\\\\",biomass.filenames[m],sep='')\n  #mod<-read.csv(path,skip=6, head=T, fill=T)              #monthly time-series\n  #mod<-read.table(path, skip=7, header = TRUE, fill = TRUE,sep=\",\",as.is =T)\n  #nyrs <- (ncol(mod)-4)/12 # num yrs\n  \n  #take only january values\n  #mod<-mod[,c(1:4,4+seq(1,nyrs*12,12))]          #dec values would be  mod[,3+seq(12,nyrs*12,12)]\n  #mod[62:67,1:5] #inspect\n  #mod[1:2,1:5] #info\n  \n  #### mortalities\n  #setwd(\"Y:\\\\WP1 Tradeoffs in mixed fisheries\\\\NSea Multiannual Plan\\\\Evaluation\\\\STECF Results 1000_30 years_SR_final\\\\\")\n  #setwd(\"Y:\\\\WP1 Tradeoffs in mixed fisheries\\\\NSea Multiannual Plan\\\\Evaluation\\\\STECF Results 1000_30 years_SR\\\\\")\n  #setwd(\"params$RootPath\"); g <- list.files(\"Trajectories2\"); params$strats<- c(\"HCR_HighF_Highest value\",\"HCR_LowF_Highest value\")\n  #OBSELETE ================================================================================================\n  \n  \n\n  \n  if(type2plot==1){\n    params$MORT_HCRF_Cons <- T;  if(params$MORT_HCRF_Cons) {setwd(\"HCRF_Cons\");params$YLAB<-\"F\";print(\"Plotting MORT_HCRF_Cons\")} # what are these?\n  }\n  if(type2plot==2){\n    params$MORT_HCRF_Targ<- T;   if(params$MORT_HCRF_Targ) {setwd(\"HCRF_Targ\");params$YLAB<-\"F\";print(\"Plotting HCRF_Targ\")} # what are these?\n  }\n  if(type2plot==3){\n    params$QUOTA_HCRF_Cons<- T;  if(params$QUOTA_HCRF_Cons) {setwd(\"HCRQuota_Cons\");params$YLAB<-\"t/km2\";print(\"Plotting HCRQuota_Cons\")} # what are these?\n  }\n  if(type2plot==4){\n    params$QUOTA_HCRF_Targ<- T;  if(params$QUOTA_HCRF_Targ) {setwd(\"HCRQuota_Targ\");params$YLAB<-\"t\";print(\"Plotting HCRQuota_Targ\")} # what are these?\n  }\n  if(type2plot==5){\n    params$MORT_REAL_LandF <- T; if(params$MORT_REAL_LandF) {setwd(\"RealisedLandedF\");params$YLAB<-\"F\";print(\"Plotting MORT_REAL_LandF\")}\n  }\n  if(type2plot==6){\n    params$MORT_REAL_DiscF <- T; if(params$MORT_REAL_DiscF) {setwd(\"RealisedDiscardedF\");params$YLAB<-\"F\";print(\"Plotting MORT_REAL_DiscF\")}\n  }\n  if(type2plot==7){\n    params$MORT_REAL_F <- T;     if(params$MORT_REAL_F) {setwd(\"RealisedF\");params$YLAB<-\"F\";print(\"Plotting MORT_REAL_F\")}\n  }\n  #params$YLAB<-\"catch (t)\"\n  if(type2plot==8){\n    params$CATCH <-T;    if(params$CATCH) {setwd(\"CatchTrajectories\"); params$YLAB<-\"catch (t/year)\";print(\"Plotting CATCH\")}\n  }\n  if(type2plot==9){\n    params$LANDING <- T; if(params$LANDING) {setwd(\"LandingsTrajectories\"); params$YLAB<-\"landings (t/year)\";print(\"Plotting LANDING\")}\n  }\n  if(type2plot==10){\n    params$DISCARD <- T; if(params$DISCARD) {setwd(\"DiscardsTrajectories\"); params$YLAB<-\"discards (t/year)\";print(\"Plotting DISCARD\")}\n  }\n  \n  if(type2plot==11){\n    params$EFFORT <-T;print(\"Plotting EFFORT\")\n  }\n  if(type2plot==12){\n    params$VALUE <- T;print(\"Plotting VALUE\")\n  }\n  if(type2plot==13){\n    params$BIOMASS <-T;print(\"Plotting BIOMASS\")\n  }\n  \n  if(type2plot==14){\n    params$HIGHEST_VALUE <- T;print(\"Plotting HIGHEST_VALUE\")\n  }\n  if(type2plot==15){\n    params$CHOKE_GROUPS <- T;print(\"Plotting CHOKE_GROUPS\")\n  }\n  \n  if (params$COMPARE_STRATEGIES){\n    print(params$strats)\n    print(\"\")\n    strat1 <- readline(prompt=\"Select by vector index the 1st Strategy you want to compare:\")\n    strat2 <- readline(prompt=\"Select by vector index the 2nd Strategy you want to compare:\")\n    strat1name = strat[strtoi(strat1)]\n    strat2name = strat[strtoi(strat2)]\n    print(strat1name)\n    print(strat2name)\n    #params$Groups2Plot = c(14,16,18,29, 78)\n    #params$Groups2Plot = 14\n    #params$Fleets2Plot = c(67:77, 79)\n    #params$Fleets2Plot = c(67:68)\n    print(\"Comparing for groups: \")\n    print(params$Groups2Plot)\n    print(\"Compare for fleets: \")\n    print(params$Fleets2Plot)\n  }\n  \n  ###F Trajectories\n  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  \n  if(any(params$MORT_REAL_F,params$MORT_REAL_LandF,params$MORT_REAL_DiscF,params$MORT_HCRF_Cons,params$MORT_HCRF_Targ,params$QUOTA_HCRF_Cons,params$QUOTA_HCRF_Targ,params$CATCH,params$DISCARD,params$LANDING)) plot_fishing_trajectories(params)\n  \n  ###Biomass trajectoreis\n  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  \n  if (params$BIOMASS) plot_biomass_trajectories(params)\n  \n  ###Value trajectories\n  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  \n  if (params$VALUE) plot_value_trajectories(params)\n  \n  ###Effort trajectories\n  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  \n  if (params$EFFORT) plot_effort_trajectories(params)\n\n  ###HIGHEST_VALUE Pie chart\n  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  if(params$HIGHEST_VALUE) plot_highestvalue_pies(params)\n  \n  ###CHOKE SPECIES Pie chart\n  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  if(params$CHOKE_GROUPS) plot_choke_pies(params)\n\n}  \n\nfor(iplot in c(1:15)){\n  print(paste(\"Currently plotting type\", iplot))\n  plot_type(iplot)\n}\n",
    "created" : 1478613086716.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2531556875",
    "id" : "6AA38D8D",
    "lastKnownWriteTime" : 1478672335,
    "last_content_update" : 1478672335296,
    "path" : "C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/R Code/Plotting Trajectories post Jan 2016/Plotting_Trajectores_Project_2016/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R",
    "project_path" : "plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}