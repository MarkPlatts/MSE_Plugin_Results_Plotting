{
    "collab_server" : "",
    "contents" : "library(dplyr)\n\ninitialise_plotting_params = function(folder_name, params){\n  #init plotting params\n  plotting_params = list()\n  \n  #Create a vector of x vals at either yearly or monthly intervals\n  plotting_params$TimeStepVals = get_timestep_vals(params$plot_each_timestep, params$StartRun_Year, params$EndRun_Year)\n  \n  #reset the director\n  #setwd(paste(params$RootPath,\"\\\\\",folder_name, sep=''))\n  \n  #get a list of all the files in the Biomass folder\n  plotting_params$g <- list.files(paste(params$RootPath,\"\\\\\",folder_name, sep=''))\n  \n  return(plotting_params)\n}\n\nCreateFolderIfDoesntExist = function(folder.name, path){\n  dir2create = paste(path, folder.name, sep=\"\")\n  if(!dir.exists(dir2create)){\n    dir.create(dir2create)\n  }\n}\n\n\n# calculating the upper and lower confidence intervals and median ---------\ncalc_vals_for_plotting = function(params, plotting_params){\n  \n  plotting_params$MDNS<- plotting_params$LOWS<- plotting_params$UPPS<- plotting_params$MEANS<- data.frame(year=plotting_params$TimeStepVals,row.names =plotting_params$TimeStepVals)\n  for(strat_i in 1:length(params$strats)){\n\n    STRAT<-paste(params$strats[strat_i],sep=' ')\n    \n    #select subset of data\n    data2plot<- plotting_params$dat[plotting_params$dat$Strategy %in% STRAT,5:ncol(plotting_params$dat)]\n    \n    #quantiles for polygon plot\n    perc<-apply(data2plot,2, FUN=function(x){quantile(x,probs=c(0.025,0.5,0.975),na.rm=T)})\n    perc<-rbind(perc, apply(data2plot,2, FUN=mean) )\n    \n    #save percs\n    plotting_params$LOWS<- cbind(plotting_params$LOWS,perc[1,]);   names(plotting_params$LOWS)[ncol(plotting_params$LOWS)]<-STRAT\n    plotting_params$MDNS<- cbind(plotting_params$MDNS,perc[2,]);   names(plotting_params$MDNS)[ncol(plotting_params$MDNS)]<-STRAT\n    plotting_params$UPPS<- cbind(plotting_params$UPPS,perc[3,]);   names(plotting_params$UPPS)[ncol(plotting_params$UPPS)]<-STRAT\n    plotting_params$MEANS<- cbind(plotting_params$MEANS,perc[4,]); names(plotting_params$MEANS)[ncol(plotting_params$MEANS)]<-STRAT\n\n  }\n  \n  return(plotting_params)\n  \n}\n\n#Create a list of user selected strategies ---------------------------------\ncreate_list_strategies = function(Path2ResultsCSV)\n{\n  path_and_filename = paste(Path2ResultsCSV, \"Results.csv\", sep='')\n  results<-read.table(path_and_filename,sep=',',skip=8,col.names=c(\"Model\",\"Strategy\",\"GroupID\",\"GroupName\",\"Variable\",\"Value\"), fill=T)\n  results<-results[results$Strategy!=\"Z\",]#odd one in _SR_final\n  strats <- as.character(unique(results$Strategy))  # 10/15 strategies\n  vector_of_strats = vector()\n  repeat {\n    print(strats)\n    nstrats = length(strats)\n    keypress = readline(\"Press index number for strategy to add to array or e to end\")\n    if(keypress == \"e\") break\n    keypress = strtoi(keypress) # convert to integer so we can check whether in range of indices for strategies\n    if(keypress >= 1 & keypress <= nstrats){\n      vector_of_strats = c(vector_of_strats, strats[keypress])\n    }\n  }\n  return(vector_of_strats)\n  \n}\n\n\n# Calculate all the x-values for plotting ---------------------------------\nget_timestep_vals = function(plotmonthly, start_year, end_year){\n  if (plotmonthly){\n    xvals=seq(start_year,end_year-1/12,1/12)\n  } else {\n    xvals = start_year:(end_year-1)\n  }\n}\n\nLoadUniqueStrategies = function(path){\n  \n  file.path = paste(path,\"/ValueTrajectories/ValueYearly_AllGroups_FleetNo8.csv\", sep=\"\")\n  file.data = read.csv(file.path, skip=7, header = TRUE)\n  UniqueStrategies = as.vector(as.matrix(unique(file.data$StrategyName)))\n  return(UniqueStrategies)\n  \n}\n\nLoadUniqueGroups = function(path)\n{\n  if(file.exists(paste(path,\"UniqueGroups.csv\",sep=\"\"))){\n    UniqueGroups = as.matrix(read.csv(paste(path,\"UniqueGroups.csv\", sep=\"\"),header = T))\n  } else {\n    file.path = paste(path,\"/Results.csv\", sep=\"\")\n    file.data = read.csv(file.path, skip=7, header = TRUE)\n    file.data = filter(file.data, ResultName == \"BiomassMin\")\n    UniqueGroups = as.vector(as.matrix(unique(file.data$GroupName)))\n    write.csv(UniqueGroups,paste(path,\"UniqueGroups.csv\",sep=\"\"), row.names = F)\n  }\n  return(UniqueGroups)\n}\n\nSubsetVectorStrings_ContainingString = function(VectorStrings, String2Find)\n{\n  SubsetIndices = grep(String2Find, VectorStrings, fixed=TRUE)\n  return(VectorStrings[SubsetIndices])\n}\n\n#Checks whether the filename given is incorrect given setting to either plot yearly or none yearly values\nIsIncorrectFileType_YearlyMonthly = function(FileName, plot_yearly){\n  \n  \n  if(length(grep(\"Yearly\", FileName, fixed=TRUE))>0 & !plot_yearly) return(TRUE)\n  if(length(grep(\"Yearly\", FileName, fixed=TRUE))==0 & plot_yearly) return(TRUE)\n  return(FALSE)\n\n}\n\n\n#Find a string within another string\n#This can be done in a single line but it is fairly unreadable\nStringContains = function(ContainingString, String2Check)\n{\n  return(length(grep(String2Check, ContainingString, fixed=TRUE))>0)\n}\n\n\n#Check that multiple strings all exist within another string\nStringContains_AllStrings = function(ContainingString, MultipleStrings2Check)\n{\n  for(iString in MultipleStrings2Check){\n    if(StringContains(ContainingString, iString)==FALSE) \n      return(FALSE)\n  }\n  return(TRUE)\n}\n\n\nCheck_FileName_Contains_Strings = function(FileName, MultipleStrings2Check)\n  #This just wraps around StringContains_AllStrings with a name more fitting for the code so easier to read\n{\n  StringContains_AllStrings(FileName, MultipleStrings2Check)\n}\n\n\nGetFileName_ContainsStrings = function(FolderPath, Strings, WithPath)\n{\n  #Create a list of files at path\n  AllFileNames = list.files(FolderPath, full.names = WithPath)\n  \n  #cycle through list checking whether file contains the strings\n  for(iFileName in AllFileNames)\n  {\n    if(Check_FileName_Contains_Strings(iFileName,Strings))\n    {\n      return(iFileName)\n    }\n  }\n  \n}\n\n\nFileIsForACompareGroup = function(params, FILENAME){\n  nNotGroups2Compare=0\n  for (igroup in params$Groups2Plot){\n    if(!length(grep(igroup,FILENAME, fixed=TRUE))>0) nNotGroups2Compare = nNotGroups2Compare+1\n  }\n  if(length(params$Groups2Plot)==nNotGroups2Compare) {\n    return(FALSE)\n  } else {\n    return(TRUE)\n  }\n}\n\nFileIsForACompareGroupFleet = function(params, FILENAME){\n  FILENAME = paste(FILENAME,\".csv\", sep=\"\")\n  for (igroup in params$Groups2Plot){\n    if(length(grep(igroup,FILENAME, fixed=TRUE))>0) {\n      for (iFleet in params$Fleets2Plot){\n        if(iFleet==\"AllFleets\" && length(grep(\"AllFleets\",FILENAME, fixed=TRUE))>0) {\n          #browser()\n          return (TRUE)\n        }\n        if(length(grep(paste(iFleet,\".csv\", sep=''),FILENAME, fixed=TRUE))>0) {\n          #browser()\n          return (TRUE)\n        }\n      }\n    }\n  }\n  return (FALSE)\n}\n\nNumberOfValsNotNA = function(object.to.check, STRAT){\n  \n  return(sum(object.to.check[object.to.check$Strategy %in% STRAT,6:ncol(object.to.check)]!=-9999))\n  \n}\n",
    "created" : 1485347428778.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "117652258",
    "id" : "7CD14F5C",
    "lastKnownWriteTime" : 1486117741,
    "last_content_update" : 1486117741,
    "path" : "C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/share_tools.R",
    "project_path" : "share_tools.R",
    "properties" : {
        "source_window_id" : ""
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}