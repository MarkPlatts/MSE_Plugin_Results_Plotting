{
    "collab_server" : "",
    "contents" : "#When doing a normal run(i.e. not a CV) the prediction is for 2009 and the data used is for 2009\n# so for e.g. the data for the number of choices for RUM1 comes from 2009.\n    \nCreateOutput = function()\n\t{\n\t\n\tmeans100 = c(6.423333333,11.36333333,0.5,61.56333333,72.22333333,4.506666667,0.99,23.65666667,155.55,189.82,1.07,7.64,6.36,85.51,130.1366667,229.9133333,324.0966667,39.52333333,3.29,19.72,82.22,68.24666667,437.34,154.5233333,0.466666667,24.47333333,62.39333333,13.35,8.733333333,43.50666667,1.013333333,18.45666667,6.35,1.116666667,4.953333333,2.023333333)\n\t\n\tfor(i in 1:36)\n\t\t{\n\t\tif(means100[i]>13.72)\n\t\t\t{\n\t\t\t#n = ceiling(15.35/(0.05*means100[i]))^2\n\t\t\tn = 500\n\t\t\tCloseAreas2(i,n,F,F)\n\t\t\t}\n\t\t}\n\n\t}\n\nCreateOutput2 = function()\n\t{\n\tCloseAreas2(1,1000,F,F)\n\tCloseAreas2(2,1000,F,F)\n\tCloseAreas2(3,1000,F,F)\n\tCloseAreas2(6,1000,F,F)\n\tCloseAreas2(7,1000,F,F)\n\tCloseAreas2(11,1000,F,F)\n\tCloseAreas2(12,1000,F,F)\n\tCloseAreas2(13,1000,F,F)\n\tCloseAreas2(19,1000,F,F)\n\tCloseAreas2(25,1000,F,F)\n\tCloseAreas2(28,1000,F,F)\n\tCloseAreas2(29,1000,F,F)\n\tCloseAreas2(31,1000,F,F)\n\tCloseAreas2(32,1000,F,F)\n\n\n\t#CloseAreas2(4,303,F,F)\n\t#CloseAreas2(5,220,F,F)\n\t#CloseAreas2(8,2050,F,F)\n\t#CloseAreas2(9,48,F,F)\n\t#CloseAreas2(10,32,F,F)\n\t#CloseAreas2(14,157,F,F)\n\t#CloseAreas2(15,68,F,F)\n\t#CloseAreas2(16,22,F,F)\n\t#CloseAreas2(17,11,F,F)\n\t#CloseAreas2(18,735,F,F)\n\t#CloseAreas2(21,170,F,F)\n\t#CloseAreas2(22,247,F,F)\n\t#CloseAreas2(24,48,F,F)\n\t#CloseAreas2(26,1916,F,F)\n\t#CloseAreas2(27,295,F,F)\n\t#CloseAreas2(30,607,F,F)\n\t\n\t}\n\n\n# cross = Cross-validation,  re = Random Effects\n\n#WARNING NEEDS REPERAMETERISING FOR CV AND RE BEFORE USING FOR THEM\n#ONLY PARAMETERS FOR NORMAL RUNS OKAY\n\nCloseAreas = function(closednums, nits, cross, re)\n  {\n    #set the working directory\n  if(cross==TRUE)\n      {setwd(\"X:/RUM_Mark/Models/Cross-validation/Pred 2009\")}  #when doing cross-validation\n    else\n      #{setwd(\"X:/RUM_Mark/Models/Simulation\")}  #when running with final parameters(2006-09)\n      {setwd(\"C:/Simulation\")}\n  for(i in 1:length(closednums))\n    {\n    result_i = matrix(data=0,nrow=12,ncol=36)\n    for(j in 1:nits)\n      {\n      print(paste(\"Result from run\", j))\n      result_i = result_i + predict(closednums[i], cross, re)\n      }\n    result_i = result_i/nits\n    write.csv(x=result_i, file=paste(\"Results/Area\",as.numeric(closednums[i]),\".csv\",sep=\"\"))\n    }\n  }\n  \nCloseAreas2 = function(closednums, nits, cross, re)\n#record the total number of choices per year that go to each rectangle for each run\n  {\n    #set the working directory\n  if(cross==TRUE)\n      {setwd(\"X:/RUM_Mark/Models/Cross-validation/Pred 2009\")}  #when doing cross-validation\n    else\n      #{setwd(\"X:/RUM_Mark/Models/Simulation\")}  #when running with final parameters(2006-09)\n      {setwd(\"C:/Simulation\")}\n  for(i in 1:length(closednums))\n    {\n    result_i = matrix(data=0,nrow=nits,ncol=36)\n    for(j in 1:nits)\n      {\n      print(paste(\"Result from run\", j))\n      result_i[j,] = colSums(predict(closednums[i], cross, re))\n      }\n    write.csv(x=result_i, file=paste(\"Results/Area_IndivRuns\",as.numeric(closednums[i]),\".csv\",sep=\"\"))\n    }\n  }\n  \ndiagnose = function(n, closednum)\n{\n  result_i = matrix(data=0,nrow=12,ncol=36)\nfor(j in 1:n)\n    {\n    print(paste(\"Result from run\", j))\n    result_i = result_i + predict(closednum)\n    }\n result_i/n\n}\npredict = function(areaclosed, cross, re)\n{\n#Record number of primary & secondary choices made\nNoPrim = 0\nTotalSecondary = 0\n#Load in the data\n#load the data for whether each vessel fished a location\nVesFished = list()\nfor(i in 1:62)\n{\nif(cross==T) #is it the cross-validation or just a normal run\n      {temp = read.table(paste(getwd(),\"/VesselFished2008/ves\",i, \".txt\", sep=\"\"), header=T)}\n    else\n      {temp = read.table(paste(getwd(),\"/VesselFished(12 month lag)/Vessel_ \",i, \".txt\", sep=\"\"), header=T)}\ntemp = as.matrix(temp)\ntempextend = matrix(data=0, nrow=24,ncol=36)\n    tempextend[1:12,1:36] = temp[1:12,2:37]\nVesFished[length(VesFished)+1] = list(tempextend)\n}\n#load the distance data\ndistance = read.table(\"distance_homeport.csv\", header=T, sep=\",\")\n#Load the number of choices in RUM1\nNoChoices1 = read.table(\"RUM1anon_NoChoices.csv\", header=T, sep=\",\")\n#Load the number of choices in RUM2\nNoChoices2 = read.table(\"RUM2anon_NoChoices.csv\", header=T, sep=\",\")\n#Load in the number of choices given what the primary is\nNoGivenPrimary = read.table(\"NoChoicesGivenPrimary.csv\", header=T, sep=\",\")\n#Load the distribution of secondary choices given primary\nSecDist = read.table(\"SecondaryDistributionGivenPrimary.csv\", header=T, sep=\",\")\nSecDist[is.na(SecDist)]=0\n#Load the ASCX for RUM1\nASCXRum1 = vector(length=18)\n#Setup a matrix for recording\nvisits = matrix(data=0, nrow=12,ncol=36)\n  if(cross==F)\n    {\n    #FROM ALL DATA (normal run)\n    #setup params for Rum1\n    #ASC1, 2, ...\n    ascrum1 = c(0.957, 0.710, 0.313, 0.252, -0.696, -0.436, 0.291, 0.361, -0.694, 0.396, -1.16, 0.00, -0.298, -0.155, -0.556, 0.00, -0.279, -0.846)\n    ascsumrum1 = c(0.347, -0.314, 0.607, -0.0646, 1.11, -0.348, -0.856, -0.236, -0.201, -2.55, 0.611, 0.00, -0.321, -1.24, 0.985, 0.00, 0.00, 0.00)\n    distrum1 = -0.192\n    distsrum1 = 0.173\n    fishedfleet1rum1 = 1.04\n    fishedfleet12rum1 = 0.843\n    fishedves1rum1 = 1.70\n    fishedves12rum1 = 1.07\n    #setup params for Rum2\n    #ASC1, 2, ...\n    ascrum2 = c(0.00, 2.28, 2.62, 2.21, 0.00, 0.00, 1.43, 2.01, 1.41, 0.00, 0.00, 1.03, 0.593, 1.69, 1.90, 1.11, 0.00, 0.00, 1.25, -0.201, 0.774, 1.58, 1.52, 0.909, 0.00, 0.00, 0.0673, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00)\n    ascsumrum2 = c(0.00, -0.726, -0.337, -0.357, 0.00, 0.00, -0.237, -0.0440, -0.325, 0.00, 0.00, 0.406, -0.462, -0.702, -0.869, -1.45, 0.00, 0.00, -1.66, -0.483, -0.550, -1.55, -0.521, 0.272, 0.00, 0.00, -0.262, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00)\n    distrum2 = -0.173\n    fishedfleet1rum2 = 0.669\n    fishedves1rum2 = 1.37\n    fishedves12rum2 = 1.02\n    }\n  if(cross==T)\n    {\n    \n    #WARNING NEEDS REPERAMETERISING BEFORE USING\n    \n    #FROM 06-08 DATA\n    #setup params for Rum1 (cross-validation run)\n    #ASC1, 2, ...\n    ascrum1 = c(0, -0.354, -0.841   ,0.696,-1.42,-1.3,-0.607, -0.679, -1.81, -0.482, -1.82, -0.791, 0.939, -1.13, -1.68  ,-1.28  ,-1.65  ,-1.79)\n    ascsumrum1 = c(0, -0.872, 0.13, -0.505, 0.318, -0.727, -1.4, -0.758, -0.417, -2.99, -0.103, -0.716, -0.958, -1.67, 0.958, -0.841, 0.258, -0.546)\n    distrum1 = -0.185\n    #distsrum1 = 0.173\n    fishedfleet1rum1 = 1.02\n    fishedves1rum1 = 1.74\n    fishedves12rum1 = 1.16\n    #setup params for Rum2\n    #ASC1, 2, ...\n    ascrum2 = c(0, 3.12, 3.84, 3.08, 0, 0, 3.18, 2.86, 2.41, 2.19, 0, 2.18, 1.61,  2.79, 2.89, 1.96, 0, 0.737, 2.16, 1.04, 1.84, 2.68, 2.59, 1.78, 1.17, 0, 1.1, 0, -2.65, 1.08, 0, 2.1, 0)\n    ascsumrum2 = c(0, -2.04, -2.05, -1.89, 0, 0, -2, -1.69, -2.06, -2.95, 0, -1.52, -2.43, -2.47, -2.57, -3.93, 0, -1.96, -3.39, -2.27, -2.27, -3.23, -2.39, -1.28, -3.89, 0, -1.84, 0, 0, -1.27, 0, -2.4  , 0)\n    distrum2 = -0.180\n    fishedfleet1rum2 = 0.74\n    fishedves1rum2 = 1.41\n    fishedves12rum2 = 1.06\n  }\n if(re==T)\n    {\n    \n    #WARNING NEEDS REPERAMETERISING BEFORE USING\n    \n    #FROM ALL DATA with Random Effects (No random effects; removed further down in code - random effects too difficult)\n    #setup params for Rum1\n    #folder: lags, dist(rand), season (CFSQP converge)\n    #ASC1, 2, ...\n    ascrum1 = c(1.46, 1.16, 0.648, 0.510, -0.505, -0.446, 0.474, 0.528, -0.566, 0.302, -1.19, 0.00, -0.147, 0.107, -0.439, 0.00, -0.379, -0.902)\n    ascsumrum1 = c(0.432, -0.225, 0.676, 0.0213, 1.15, -0.347, -0.818, -0.249, -0.147, -2.56, 0.607, 0.00, -0.307, -1.16, 1.04, 0.00, 0.00, 0.00)\n    distrum1 = -0.268\n    distsrum1 = 0.127\n    fishedfleet1rum1 = 1.02\n    fishedfleet12rum1 = 0.837\n    fishedves1rum1 = 1.61\n    fishedves12rum1 = 0.999\n    \n    #setup params for RUM\n    #ASC1, 2, ...\n    ascrum2 = c(0, 2.01, 2.35, 1.96, 0, 0, 1.16, 1.86, 1.29, 0.00, 0.00, 0.930, 0.515,  1.47, 1.62, 0.995, 0, 0.00, 0.976, -0.385, 0.366   , 1.34      , 1.37    , 0.790   , 0.00    , 0.00    , 0.355   ,  0.00    ,  0.00    ,  0.00    , 0,  0.00    , 0)\n    ascsumrum2 = c(0, -0.630, -0.445, -0.480, 0, 0, -0.283, -0.166, -0.444, 0.00, 0.00, 0.259, -0.611, -0.860  , -1.04   , -1.74   , 0.00    , 0.00    , -1.71   , -0.580  , -0.706  , -1.72   , -0.653  , 0.0496  , 0.00    , 0.00    , -0.448  , 0.00    , 0.00    , 0.00    , 0, 0  , 0)\n    distrum2 = -0.191\n    distsrum2 = -0.0927\n    fishedfleet1rum2 = 0.595\n    fishedfleet12rum2 = 1.01\n    fishedves1rum2 = 1.23\n    fishedves12rum2 = 0.923\n    \n    }\n#create 62 dist values, one for each vessel sampled from random effects normal distribution\n#NOTE!!! I have decided to remove the random effects on distance because it is difficult to parameterise each vessel seperately\nif(re==T)\n    {\n    rdistrum1 = rnorm(62, distrum1, distsrum1)\n    rdistrum2 = rnorm(62, distrum2, distsrum2)\n    }\n  else\n    {\n    rdistrum1 = rep(distrum1,62)\n    rdistrum2 = rep(distrum2,62)\n    }\n#setup vectors of possible choices given which rum using (these are for use when deciding which locations to calc utilities for\nposchoices1 = c(4,5,9,10,14,15,16,17,20,21,22,23,24,26,27,30,32,33)\nposchoices2 = c(1,2,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36)\n#setup a matrix for entire fleet visiting a location\nFleetFished = matrix(data=0, nrow=24, ncol=36)\nfor(i in 1:62)\n{\nFleetFished[1:12,1:36] = FleetFished[1:12,1:36] + VesFished[[i]][1:12,1:36]\n}\nFleetFished[FleetFished>0]=1\n#Run for each month\nfor (month in 13:24)\n{\n#Run for the primary locations first\n#set season to 1 if month is between 4-8\nseason=0\nif(month>15 && month<21)\n      {\n      season=1\n      }\n#RUM1===============#\n#get index for alt that is closed\naltclosed=0\nfor(p in 1:(length(poschoices1)))\n{\nif(poschoices1[p]==areaclosed){altclosed=p}\n}\n#Run for each vessel\nfor(i in 1:62)\n{\n#repeat for the number of choices made by vessel i in same month a year ago\nNoChoices = NoChoices1[i,month-11]\nvesnumber = NoChoices1[i,1]\n#calculate the utility of each alternative\nUtility = vector(length=18)\nfor(alt in 1:18)\n{\nlocation = poschoices1[alt]\n  Utility[alt] = ascrum1[alt] + ascsumrum1[alt]*season + fishedves1rum1*VesFished[[vesnumber]][month-1,location] + fishedves12rum1*VesFished[[vesnumber]][month-12,location] + fishedfleet1rum1*FleetFished[month-1,location] + fishedfleet12rum1*FleetFished[month-12,location] + rdistrum1[vesnumber] * distance[vesnumber,location+1]\n        }\nprob = vector(length=18)\nfor(alt in 1:18)\n{\n#calc probabilities\nif(altclosed!=0)\n{prob[alt]=exp(Utility[alt])/(sum(exp(Utility))-exp(Utility[altclosed]))}\nelse\n{prob[alt]=exp(Utility[alt])/sum(exp(Utility))}\n#SET PROB TO ZERO FOR CLOSED AREA\nif(poschoices1[alt] == areaclosed){prob[alt]=0}\n#calc cumulative probability\nif(alt>1){prob[alt]=prob[alt]+prob[alt-1]}\n}\n      if(NoChoices>0)\n        {\n        for(choice in 1:NoChoices)\n  {\n  randomval = runif(1,0,1)\n  lowerprob = 0 #This is used to create the lower bound for the interval that the random val needs to be in to have chosen alt n\n  for(n in 1:18)\n            {\n  if(randomval<prob[n] & randomval>lowerprob)\n              {\n  chosen=n\n  NoPrim = NoPrim + 1\n  }\n            lowerprob=prob[n]\n            }\n#Record choice\n          visits[month-12,poschoices1[chosen]]=visits[month-12,poschoices1[chosen]]+1\n          VesFished[[vesnumber]][month,poschoices1[chosen]]=1\n          FleetFished[month,poschoices1[chosen]]=1\n  }\n}\n  }\n    #RUM2==================#\n    #run for each vessel\n    #get index for alt that is closed\n    altclosed=0\n    for(p in 1:(length(poschoices2)))\n  {\n  if(poschoices2[p]==areaclosed){altclosed=p}\n  }\n    for(i in 1:62)\n      {\n      #repeat for the number of choices made by vessel i in same month a year ago\n      NoChoices = NoChoices2[i,month-11]\n      vesnumber = NoChoices2[i,1]\n      #calculate the utility of each alternative\n  Utility = vector(length=33)\n  for(alt in 1:33)\n  {\n  location = poschoices2[alt]\n  Utility[alt] = ascrum2[alt] + ascsumrum2[alt]*season + rdistrum2*distance[vesnumber,location+1] + fishedves1rum2*VesFished[[vesnumber]][month-1,location] + fishedves12rum2*VesFished[[vesnumber]][month-12,location] + fishedfleet1rum2*FleetFished[month-1,location]\n        \t\t}\n\n   \t\tprob = vector(length=33)\n  \t\tfor(alt in 1:33)\n  \t\t\t{\n\t\t\tif(altclosed!=0)\n  \t\t\t\t{prob[alt]=exp(Utility[alt])/(sum(exp(Utility))-exp(Utility[altclosed]))}\n\t\t\telse\n\t\t\t\t{prob[alt]=exp(Utility[alt])/sum(exp(Utility))}\n\n\t\t\t#SET PROB TO ZERO FOR CLOSED AREA\n\t\t\tif(poschoices2[alt] == areaclosed){prob[alt]=0}\n\n\t\t\t#calc cumulative probability\t\t\t\n  \t\t\tif(alt>1){prob[alt]=prob[alt]+prob[alt-1]}\n  \t\t\t}\n\n      if(NoChoices>0){\n        for(choice in 1:NoChoices)\n          {\n          randomval = runif(1,0,1)\n\t\t\t    lowerprob = 0 #This is used to create the lower bound for the interval that the random val needs to be in to have chosen alt n\n  \t\t\t  for(n in 1:33)\n  \t\t\t\t  {\n\n\t\t\t\t    if(randomval<prob[n] & randomval>lowerprob)\n              {\n\t\t\t\t\t    chosen=n\n\t\t\t\t\t    NoPrim = NoPrim + 1\n\t\t\t\t\t    }\n  \t\t\t\t  lowerprob=prob[n]\n  \t\t\t\t  }\n      \t\tchosen = poschoices2[chosen]\n\n          visits[month-12,chosen]=visits[month-12,chosen]+1\n          VesFished[[vesnumber]][month,chosen]=1\n        \tFleetFished[month,chosen]=1\n         \n      \t\t#Choose secondary choices given primary====================#\n\n        \t\t#get the d.f. for the number of choices given chosen primary\n        \t\tChosenNumDist = NoGivenPrimary[NoGivenPrimary$Primary==chosen,2:7]\n        \t\tChosenNumDist = ChosenNumDist/sum(ChosenNumDist)\n        \t\tfor(n in 2:6)\n          \t\t\t{\n          \t\t\tChosenNumDist[n]=ChosenNumDist[n]+ChosenNumDist[n-1]\n          \t\t\t}\n          \n        \t\t#get d.f for where choices were made given chosen primary\n\t  \t\t#ChosenSecDist is the cumulative probability distribution of each secondary location given the primary location chosen\n        \t\tChosenSecDist = SecDist[SecDist$Primary==chosen,2:37]\n\t  \t\t#set probability to zero for location closed\n\t\t\tif(areaclosed!=0)\n\t\t\t\t{\n\t  \t\t\tChosenSecDist[areaclosed]=0\n\t\t\t\t}\n\t\t\tNumberPossibleSecondaries = length(ChosenSecDist[ChosenSecDist!=0])\n\n\t\t\tif(sum(ChosenSecDist)!=0)\n\t\t\t\t{\n \t\t\t  ChosenSecDist = ChosenSecDist/sum(ChosenSecDist)\n\t\t\t\t}\n\n        \t\tfor(n in 2:36)\n          \t\t\t{\n          \t\t\tChosenSecDist[n]=ChosenSecDist[n]+ChosenSecDist[n-1]\n          \t\t\t}\n        \n        \t\t#randomly select the number of secondary choices\n        \t\trandnum = runif(1,0,1)\n        \t\tlowerprob=0\n        \t\tfor(n in 1:6)\n          \t\t\t{\n          \t\t\tif(randnum<ChosenNumDist[n] & randnum>lowerprob){NumberOfChoices=n}\n          \t\t\tlowerprob=ChosenNumDist[n]\n          \t\t\t}\n          \n        \t\t#Choose the locations\n        \t\tSecondaryChoices = NULL\t#secondarychoices are the choices that have been made\n        \t\tNumberSelected = 0\n\n\t\t\tif(NumberPossibleSecondaries<NumberOfChoices)\n\t\t\t\t{\n\t\t\t\tfor(p in 1:(NumberOfChoices-NumberPossibleSecondaries))\n\t\t\t\t\t{\n\t\t\t\t\tSecondaryChoices = c(SecondaryChoices,chosen)\n\t\t\t\t    \tNumberSelected=NumberSelected+1\n\t\t\t\t\t}\n\t\t\t\t}\n        \n\t  \t\t#if there are no secondary choices available then select primary again\n#\t  \t\tif(sum(ChosenSecDist)==0)\n#\t\t\t\t  {\n#count1 = 0\n#\t\t\t\t  while(NumberSelected<NumberOfChoices)\n#            \t\t    {\n#count1 = count1 + 1\n#print(\"1st test: while(NumberSelected<NumberOfChoices)\")\n#print(count1)\n#\t\t\t\t    SecondaryChoices = c(SecondaryChoices,chosen)\n#\t\t\t\t    NumberSelected=NumberSelected+1\n#\t\t\t\t    }\n#\t\t\t\t  }\ncount2 = 0\n        while(NumberSelected<NumberOfChoices)\n     \t\t\t{\n\t\t\tfoundsec = F\ncount2 = count2 + 1\n#print(\"2nd test: while(NumberSelected<NumberOfChoices)\")\n#print(count2)\nif(count2==1000){browser()}\n     \t\t\trandnum = runif(1,0,1)\n     \t\t\tlowerprob=0\n\n          for(j in 1:36)\n       \t{\n\n            #count how many of current choice have been selected\n            if(is.null(SecondaryChoices))\n             \t{NumAlready = 0}\n            else\n            \t{NumAlready = length(SecondaryChoices[SecondaryChoices==j])}\n            if(randnum<ChosenSecDist[j] & randnum>lowerprob & NumAlready==0)\n            \t{\n            \tSecondaryChoices = c(SecondaryChoices,j)\n            \tlowerprob=ChosenSecDist[j]\n            \tNumberSelected=NumberSelected+1\n              \tTotalSecondary = TotalSecondary + 1\n\t\t\tfoundsec = T\n            \t}\n\t\tlowerprob = ChosenSecDist[j]\n           \t}\n#\t   if(foundsec==F)\n#\t\t{\n#\t\tSecondaryChoices = c(SecondaryChoices,j)\n#            lowerprob=ChosenSecDist[j]\n#            NumberSelected=NumberSelected+1\n#            TotalSecondary = TotalSecondary + 1\n#\t\t}\n\t\t\t\n         }\n\n      #record the secondary choices made\n      for(k in 1:NumberOfChoices)\n        {\n        chosen = SecondaryChoices[k]\n        visits[month-12,chosen]=visits[month-12,chosen]+1\n        VesFished[[vesnumber]][month,chosen]=1\n        FleetFished[month,chosen]=1\n        }\n          \n      }\n    }\n  }\n}\n  print(paste(\"Total Primary choices:\",NoPrim))\n  print(paste(\"Total Secondary choices:\",TotalSecondary))\n  visits\n\n\t}  ",
    "created" : 1480235910158.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "879955813",
    "id" : "33F38EC9",
    "lastKnownWriteTime" : 1480389382,
    "last_content_update" : 1480389382113,
    "path" : "C:/Users/Mark/Dropbox/RUM/Simulation/SIMULATE.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}