{
    "collab_server" : "",
    "contents" : "#Graphs from results of the Harvest Control Rules - Steve Mack, Mark Platts\n#generic code - Silvia Hadeler March 2013\n\n#to clear any previous calculation which may interfere with the current one \nrm(list=ls())\n\n#setting directory where data is from\nsetwd(\"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/R Script_Plotting Results/codes_Jan 2015\")\n\n#loading packages which will be used in the following calculations\nlibrary(ggplot2)\nlibrary(plyr)\n\n#Strategies = c(\"Mixed Fishery MSY HighestValue\", \"Mixed Fishery MSY None\")\n\n\n#######################################\n############ FUNCTIONS ################\n#######################################\n\n### Select name of species you would like to analyse\nspecies.select <- function(species.1){  # function returns a vector with numerical species indeces\n  # corresponding to the species index in each data file\n  \n  species.select.1<-FALSE\t# logic labels telling us if we have selected a valid species\n  species.select.3<-FALSE\n  \n  if(interactive()) {\t# need to run this interactively to enter species name\n    \n    while(!species.select.1){\t# continue until we have found the correct species\n      species.name<-readline(\"Input species name: \") \t# enter species name\n      #does this species exist in species.1, i.e. Results.csv?\n      species.index.1<-grep(as.character(species.name), ignore.case=TRUE, species.1)\n      \n      if (length(species.index.1)==0) {\t\t\t# no species found\n        print(c(\"No matching species found\")) \n      }\n      \n      if (length(species.index.1)==1) {\t\t\t# found exactly one species from Results.csv\n        species.index.1<-as.numeric(species.index.1)\t# species.index.1 is a string otherwise\n        species.select.1<-TRUE\n      }\n      \n      if (length(species.index.1)>1) {\t\t\t# more than one species found\n        print(c(\"Found more than one species containing this name\"))\n        Species<-species.1[species.index.1]\t\t# generate a data.frame to display species to choose from\n        Index<-species.index.1\n        display.data.frame<-data.frame(Species, Index)\n        while(!species.select.3){\t\t\t# select one from shortlist\n          print(c(\"Please select index from:\"))\n          print(display.data.frame)\n          select.index<-readline(\"Select species number \")\n          valid<-(match(select.index, species.index.1))\t# have we selected a valid index?\n          if (!is.na(valid)){\n            species.select.1<-TRUE\n            species.select.3<-TRUE\n            species.index.1<-select.index\t\t# set species.index.1 to the species we are working with now\n            # from Fleet.csv\n          }  \n        }  \n      }\n    }\n    \n    print(c(\"Selected species from Results.csv is: \", species.1[as.numeric(species.index.1)]))\n    \n  } else {\n    \n    output<-c('You need to run this script in interactive mode.')\n    print(output)\n    \n  }\n  \n  species.index.1\t# function returns numerical species index\n  \n}\n##############################end of species selection function\n\n\n##################################\n### Scale axes\n#################################\nscale.axis.nice <- function(max_in) {\n  \n  max<-as.numeric(max_in)  \t\t# sometimes the input might be a string!\n  scale.base=c(1,2,2.5,3,5,7.5,10)\t\t# let's use scales whose maximum is a multiple of the scale.base, e.g. 100, 200, or 250\t\n  \n  exp<-0\n  base.index<-1\n  flag<-c(FALSE, FALSE)\n  while(flag[1]!=TRUE){\n    #    print(max)\n    #    print(base.index)\n    #    print(exp)\n    if(max>10^exp && max<10^(exp+1)) {\t# we found the correct range between 1eX and 1e(X+1), e.g. 100 & 1000\n      flag[1]<-TRUE\n      while(flag[2]!=TRUE){\t\t\t# now let's find a \"nice\" scale based on the scale.base sequence\n        #      print(scale.base[base.index]*10^exp)\n        if(max>scale.base[base.index]*10^exp) {\t# smaller than the next value based on the scale.base sequence\n          base.index<-base.index+1\n        } else {\n          flag[2]<-TRUE\n        }\n      }\n    } else {\n      if(max<10^(exp+1)) {\t\t\t# we need to check whether the exponent needs to be increased or decreased to \tfind the correct range\n        exp<-exp-1\n      }\n      else {\n        exp<-exp+1\n      }\n    }\n  }  \n  max.nice<-scale.base[base.index]*10^exp\n  \n  max.nice\n}\n\n\n# scale.axes <- function(data.set, median, LQ, UQ) {   ##function to determine the scale of both axis \n#   browser()\n#   # find the maximum of density functions\n#   max.xaxis<-as.numeric(format(max(data.set$x), scientific=TRUE))\n#   max.yaxis<-as.numeric(format(max(data.set$y), scientific=TRUE))\n#   \n#   # sometimes median, Blim or Bpa are larger than the max of the density function!\n#   max.xaxis<-max(max.xaxis, median[,2], LQ, UQ)\n#   #  max.xaxis<-max(5., median[,2],LQ, UQ)\n#   \n#   # now scale \"nicely\"  \n#   scale<-c(scale.axis.nice(max.xaxis), scale.axis.nice(max.yaxis))\n#   \n#   scale\n#   \n# }\n\nscale.axes <- function(data.set, UQ) {   ##function to determine the scale of both axis \n\n  # find the maximum of density functions\n  max.xaxis<-as.numeric(format(max(data.set$x), scientific=TRUE))\n  max.yaxis<-as.numeric(format(max(data.set$y), scientific=TRUE))\n  \n  # sometimes median, Blim or Bpa are larger than the max of the density function!\n  max.xaxis<-max(max.xaxis, UQ)\n  #  max.xaxis<-max(5., median[,2],LQ, UQ)\n  \n  # now scale \"nicely\"  \n  scale<-c(scale.axis.nice(max.xaxis), scale.axis.nice(max.yaxis))\n  \n  scale\n  \n}\n\nscale.axes.hist <- function(data, median, nbins, nUniqueStrategies) {\n  #updated to handle varying number of strategies\n  \n  #calculate what the x limits are \n  max.xaxis<-as.numeric(format(max(data[[1]]$Catch_1000t, median[,2]), scientific=TRUE))\n  if (length(data)>1){\n    for (iStrategy in 2:nUniqueStrategies){\n      max.xaxis<-as.numeric(format(max(max.xaxis, data[[iStrategy]]$Catch_1000t), scientific=TRUE))\n    }\n  }\n  min.xaxis<- 0\n  \n  #calc size of breaks\n  sizeofbreak = (max.xaxis-min.xaxis)/nbins #calc size of bins\n  #max.xaxis<-max(max.xaxis, median[,2], a, b)\n  max.yaxis = -9999\n  \n  #calculate for data what maximum y value is\n  breaks=seq(min.xaxis, max.xaxis, sizeofbreak) #determine a vector of where the bins should begin\n  \n  for (iStrategy in 1:nUniqueStrategies){\n    datacut = cut(data[[iStrategy]]$Catch_1000t, breaks, right=FALSE)\n    freqtab = table(datacut) #create the table\n    freqvec = as.numeric(freqtab)\n    propvec = freqvec/sum(freqvec)  #convert into proportions\n    densityvec = propvec/sizeofbreak\n    max.yaxis = as.numeric(format(max(max.yaxis,densityvec), scientific=TRUE))\n    \n  }\n  \n  # sometimes median, Blim or Bpa are larger than the max of the density function!\n  \n  # now scale \"nicely\"  \n  #scale<-c(scale.axis.nice(max.xaxis), scale.axis.nice(max.yaxis))\n  #scale=c(max.xaxis,max.yaxis)\n  \n  #scale = max.xaxis\n  #scale$y = max.yaxis\n  \n  list(x=max.xaxis, y=max.yaxis)\n  \n}\n\n##########################################end of axis scaling\n\n###########################################\n### select the FleetName\n###########################################\nfleet.name.select <- function(fleet.names) {\n\n  Fleetname<-fleet.names  \t# generate a data.frame to display FleetNames to choose from\n  Index<-c(1:length(fleet.names))\n  display.data.frame<-data.frame(Fleetname, Index)\n  \n  fleet.select<-FALSE\n  \n  while(!fleet.select){\t\t# select one from shortlist\n    print(c(\"Please select Fleet name from:\"))\n    print(display.data.frame)\n    fleet.index<-as.numeric(readline(\"Enter index number \"))\n    valid<-(match(fleet.index, Index))\t# have we selected a valid index?\n    if (!is.na(valid)){\n      fleet.select<-TRUE\n    }\n  }\n  \n  fleet.index\t\t\t\t# return fleet.index\n  \n}\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n#~~~~~~~~~~ start programme ~~~~~~~~~~#\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n\n#######################################\n############ READ DATA ################\n#######################################\n# Loading Excel fleet file.csv\nresults<-read.csv(\"Fleet.csv\",sep=\",\", header=TRUE, skip=7)\n#### optionally, check if the file is read correctly\nhead(results)\n\nnbins=50\n\n#######################################\n####### DATA MANIPULATION #############\n####### t/km^2 into 1000 t #############\n##### for the entire North Sea #############\n#######################################\n#adding extra colum to facilitate further manipulation\n\n# Transforming catch from t/km^2 into 1000 t by adding another column to the data in order to convert catch from  t/km2 (as outputed from EwE) into t (tonnes). Multiply catch by the area of North Sea = 570000 km2. To make the results better to present divide by 1000, i.e. so resulsts would be 1000t (ie. kTon). So to make matters easier just multiply by 570\n\nresults.t<-as.matrix(as.numeric(results$Value)) # catch in t/km^2\nresults.t<-results.t* 570           # now catch in 1000t= 10^3t\nresults.t<-cbind(results, results.t)\ncolnames(results.t)<-c(\"Iteration\",\"Strategy\",\"Fleetnumber\", \"FleetName\", \"GroupNumber\", \"GroupName\",\"value_t_per_km2\",\"Catch_1000t\")\n\n#######################################\n########## FLEET_NAME #################\n#######################################\n# which FleetNames do we have in Fleet.csv?\nfleet.names<-levels(results.t$FleetName)\n\n#######################################\n############ SPECIES ##################\n#######################################\n# which species do we have in Fleet.csv?\n# and we add \"species\" Total if we want to show total catch\nspecies<-c(levels(results.t$GroupName), \"Total\")\n\n#strategy<-unique(results$Strategy)\n\ntotal.data = matrix(nrow=0,ncol=8)\ncolnames(total.data) = c(\"Iteration\",\"Strategy\",\"Fleetnumber\",\"FleetName\",\"GroupNumber\",\"GroupName\",\"value_t_per_km2\",\"Catch_1000t\")\n\n#######################################\n####### DATA MANIPULATION #############\n####### find total catch  #############\n##### per fleet and interation ########\n#######################################\n# store the total fleet catch data here first before inserting it into results.t\n#total.data<-cbind(0, \"dummy\", \"dummy\", \"Total\", 0, 0, 0) \n\nfor (i in 1:length(fleet.names)) {  # go through all fleet names\n  \n  results.fleet<-subset(results.t, FleetName==fleet.names[i])\t# data for specific fleet\n  # for each iteration sum catch (value_t & Catch_1000t) over all species and separate by Strategy/HCRs\n  sum.fleet<-ddply(results.fleet, .(Iteration, Strategy), summarise, sum.value_t.species=sum(value_t_per_km2), sum.species=sum(Catch_1000t))\n  \n  # rearrange result so it can be added to results.t further down\n  for (j in 1:length(sum.fleet[,1])) {\t# go through all lines of sum.fleet\n    line = data.frame(Iteration=sum.fleet[j,1], Strategy=toString(sum.fleet[j,2]), Fleetnumber=i, FleetName=fleet.names[i],GroupNumber=0, GroupName=\"Total\", value_t_per_km2=as.numeric(sum.fleet[j,3]), Catch_1000t=as.numeric(sum.fleet[j,4]))\n    #line<-cbind(sum.fleet[j,1], toString(sum.fleet[j,2]),i, fleet.names[i],0, \"Total\", as.numeric(sum.fleet[j,3]), as.numeric(sum.fleet[j,4]))\n    #colnames(line)<-c(\"Iteration\",\"Strategy\",\"Fleetnumber\",\"FleetName\",\"GroupNumber\",\"GroupName\",\"value_t_per_km2\",\"Catch_1000t\")  \n    total.data<-rbind(total.data, line) \n    \n  }\n  \n}\n\n# append the total fleet catch data to the original data\nresults.t<-rbind(results.t, total.data)\nstrategy<-levels(results$Strategy)\n\n# IMPORTANT: from now we are working with results.t, last column contains catch in 1000 t \nhead(results.t)\n\n#######################################\n###########  SELECT FLEET  ############\n#######################################\n#select FleetName\nfleet.index<-fleet.name.select(fleet.names)  # returns index of chosen ResultName in result.names\n\n#######################################\n########## SELECT SPECIES #############\n#######################################\n#select species\nspecies.index<-as.numeric(species.select(species))\n\n# catch for this species and fleet - if species = \"Total\" then we are looking at the total catch of that fleet \nresults.fleet<-subset(results.t, FleetName==fleet.names[fleet.index] & GroupName==species[species.index[1]])\n##checking functions\n#head(results.species)\n#range(results.species$Catch_1000t)\n\n#######################################\n######### RESULTS STATISTICS ##########\n#######################################\n\n### sum and quantiles of fleet catch\n#sum of fleet catch per iteration and HCR\n#ResultMean <- ddply(results.fleet, .(HCR), summarise, mean.species=mean(Catch_1000t))\n#ResultMean\nResultMedian<-ddply(results.fleet, .(Strategy), summarise, median.species=median(as.numeric(Catch_1000t)))\nResultMedian\nResultQuantile<-ddply(results.fleet, .(Strategy), summarise, quantile.species=quantile(as.numeric(Catch_1000t)))\nResultQuantile\n\nUniqueStrategyNames = levels(results$Strategy)\nNumberUniqueStrategyNames = length(UniqueStrategyNames)\n\nn=list()\n\nfor (iStrategy in 1:NumberUniqueStrategyNames){\n  n[iStrategy]<-list(as.data.frame(subset(results.t,FleetName==fleet.names[fleet.index] & GroupName==species[species.index[1]] & Strategy==UniqueStrategyNames[iStrategy])))\n}\n\n#Harvest Control Rule 1\n#n1<-as.data.frame(subset(results.t,FleetName==fleet.names[fleet.index] & Strategy==Strategies[1] & GroupName==species[species.index]))\n\n#Harvest Control Rule 2\n#n2<-as.data.frame(subset(results.t,FleetName==fleet.names[fleet.index] & Strategy==Strategies[2] & GroupName==species[species.index]))\n\n### INSERT ANY OTHER CALCULATIONS HERE\n\n#######################################\n########## PLOT PREPARATION ###########\n########### KERNEL DENSITTY ###########\n#######################################\n\n# adding the individual info of each facet graph in form of data frames\n\n# find appropriate axes scales\n# left if else here in case different plots need different axes\n#if (result.index!=3) {\n#  max.axes.1=scale.axes(density(as.numeric(n1$Catch_1000t), adjust=adjustment), ResultMedian, ResultQuantile[4,2], ResultQuantile[4,2])\n#  max.axes.2=scale.axes(density(as.numeric(n2$Catch_1000t), adjust=adjustment), ResultMedian, ResultQuantile[7,2], ResultQuantile[7,2])\n\n# max.axes.1=scale.axes(density(as.numeric(n1$Catch_1000t)), ResultMedian, ResultQuantile[4,2], ResultQuantile[4,2])\n# max.axes.2=scale.axes(density(as.numeric(n2$Catch_1000t)), ResultMedian, ResultQuantile[7,2], ResultQuantile[7,2])\n\n# max.axes.1=scale.axes(density(as.numeric(n1$Catch_1000t)), ResultQuantile[4,2])\n# max.axes.2=scale.axes(density(as.numeric(n2$Catch_1000t)), ResultQuantile[9,2])\n\nmax.axes.1=scale.axes.hist(n, ResultMedian, nbins, NumberUniqueStrategyNames)$x\nmax.axes.2=scale.axes.hist(n, ResultMedian, nbins, NumberUniqueStrategyNames)$y\n\n\n# max.axes.1=scale.axes(density(n1$tx1K_km2), ResultMedian.species, Blim.species, Bpa.species)\n\n# choose the maximum values of x- and y-axis scales to plot both graphs on the same scale later\n#max.xaxis<-max(max.axes.1[1], max.axes.2[1])\n#max.yaxis<-max(max.axes.1[2], max.axes.2[2])\nmax.xaxis<-max.axes.1\nmax.yaxis<-max.axes.2\n\n# xaxis labels\n### change x labels here!\nxaxis.label<-c(\"Catch (1000 t)\")\n\n# generate formated strings from numerical values for ResultMedian, Quantiles\nResultMedian.hcr.string = list()\nfor (iStrategy in 1:NumberUniqueStrategyNames){\n  ResultMedian.hcr.string[iStrategy]<-list(format(ResultMedian[iStrategy,2], digits=3, nsmall=0))\n}\n#ResultMedian.hc1.string<-format(ResultMedian[1,2], digits=3, nsmall=0)\n#ResultMedian.hc2.string<-format(ResultMedian[2,2], digits=3, nsmall=0)\n\n# generate the label positions according to ResultMedian and catch quantiles\nbmedian.label.xpos=list()\nfor (iStrategy in 1:NumberUniqueStrategyNames){\n  bmedian.label.xpos[[iStrategy]]<-c(as.numeric(format(ResultMedian[iStrategy,2], digits=1, nsmall=0)))\n  \n}\n#bmedian.label.xpos<-c(as.numeric(format(ResultMedian[1,2], digits=1, nsmall=0)), as.numeric(format(ResultMedian[2,2], digits=1, nsmall=0)))+0.075*as.numeric(max.xaxis)\nbmedian.label.ypos<-c(3.5*as.numeric(max.yaxis))\n\nlower.quantile.label.xpos<-vector()\nupper.quantile.label.xpos<-vector()\nfor (iStrategy in 1:NumberUniqueStrategyNames){\n  lower.quantile.label.xpos[iStrategy]<-c(as.numeric(ResultQuantile[(5*iStrategy-3),2]+0.035*as.numeric(max.xaxis)))\n  upper.quantile.label.xpos[iStrategy]<-c(as.numeric(ResultQuantile[(5*iStrategy-1),2]+0.035*as.numeric(max.xaxis)))\n}\n#lower.quantile.label.xpos<-c(as.numeric(ResultQuantile[2,2])+0.035*as.numeric(max.xaxis), as.numeric(ResultQuantile[7,2])+0.035*as.numeric(max.xaxis))\n#upper.quantile.label.xpos<-c(as.numeric(ResultQuantile[4,2])+0.035*as.numeric(max.xaxis), as.numeric(ResultQuantile[9,2])+0.035*as.numeric(max.xaxis))\nlower.quantile.label.ypos<-c(2.5*as.numeric(max.yaxis))\nupper.quantile.label.ypos<-c(1.5*as.numeric(max.yaxis))\n\n# labels for BMedian lines\n#b.fleet4.lab<- data.frame(x=bmedian.label.xpos, y=bmedian.label.ypos, lab=c('B median', 'B median'), Strategy= Strategies)\n#b.fleet4.lab$lab <- as.character(b.fleet4.lab$lab)    # convert labels to character\nb.fleet4.lab = data.frame()\nfor (iStrategy in 1:NumberUniqueStrategyNames){\n  b.fleet4.lab<-rbind(b.fleet4.lab, data.frame(x = bmedian.label.xpos[[iStrategy]],\n                                               y = bmedian.label.ypos,\n                                               lab = as.character('B median'),\n                                               Strategy= UniqueStrategyNames[[iStrategy]]))\n}\n\n\n# labels for quantile lines\nb.fleet5.lab = data.frame()\nfor (iStrategy in 1:NumberUniqueStrategyNames){\n  b.fleet5.lab<- rbind(b.fleet5.lab, data.frame(x=lower.quantile.label.xpos[iStrategy], \n                                               y = lower.quantile.label.ypos, \n                                               lab=as.character('LQ'), \n                                               Strategy=strategy[iStrategy]))\n}\n  \n#b.fleet5.lab<- data.frame(x=lower.quantile.label.xpos, y = lower.quantile.label.ypos, lab=c('LQ', 'LQ'), Strategy=Strategies)\n#c(\"Harvest Control Rule 1\",\"Harvest Control Rule 2\"))\n#b.fleet5.lab$lab <- as.character(b.fleet5.lab$lab)    # convert labels to character\nb.fleet6.lab = data.frame()\nfor (iStrategy in 1:NumberUniqueStrategyNames){\n  b.fleet6.lab<- rbind(b.fleet6.lab, data.frame(x=upper.quantile.label.xpos[iStrategy], \n                                                y = upper.quantile.label.ypos, \n                                                lab=as.character('UQ'), \n                                                Strategy=strategy[iStrategy]))\n}\n\n#b.fleet6.lab<- data.frame(x=upper.quantile.label.xpos, y = upper.quantile.label.ypos, lab=c('UQ', 'UQ'), Strategy=Strategies)\n#b.fleet6.lab$lab <- as.character(b.fleet6.lab$lab)    # convert labels to character\n\n#plot.title<-paste(fleet.names[fleet.index], species.1[species.index[1]], sep=\" \")\nplot.title<-paste(fleet.names[fleet.index], species[species.index], sep=\" \")\n\n#######################################\n######## KERNEL DENSITTY PLOT #########\n#######################################\nquantile.xaxis=data.frame()\nfor (iStrategy in 1:length(UniqueStrategyNames)){\n  quantile.xaxis<-rbind(quantile.xaxis,data.frame(Strategy=strategy[iStrategy], lq.axis=ResultQuantile[5*iStrategy-3,2], uq.axis=ResultQuantile[5*iStrategy-1,2]))\n}\n#quantile.xaxis<-data.frame(Strategy= Strategies, lq.axis=c(ResultQuantile[2,2], ResultQuantile[7,2]), uq.axis=c(ResultQuantile[4,2], ResultQuantile[9,2]))\n\n# #B_FLEET<-ggplot(results.fleet,aes(x=as.numeric(Catch_1000t))) + geom_density(adjust=1, aes(group=Strategy, colour=Strategy)) +\n# B_FLEET<-ggplot(results.fleet,aes(x=as.numeric(Catch_1000t))) + geom_histogram(binwidth = 0.1) +\n#   facet_wrap(~Strategy, ncol=1)+ylab(\"Frequency\")+xlab(xaxis.label)+\n#   labs(title=plot.title) +\n#   theme(panel.background = element_blank(), panel.grid.major=element_blank(), panel.grid.minor=element_blank(),axis.line=element_line(colour=\"Black\"), axis.text=element_text(colour=\"Black\"))+\n# #  geom_text(data = b.species3.lab, aes(x = x, y = y, label = lab), size = 4) +\n#   #theme(legend.position = \"none\")+ scale_x_continuous(limits=c(0,as.numeric(max.xaxis)))+ scale_y_continuous(limits=c(0,as.numeric(max.yaxis))) +\n#   theme(legend.position = \"none\")+ xlim(c(0,as.numeric(max.xaxis)))+ ylim(c(0,as.numeric(max.yaxis))) +\n#   # median, Blim and Bpa lines and labels\n# geom_vline(data=ResultMedian, aes(xintercept=median.species),linetype=\"dotted\", size=0.7) +\n#   geom_vline(data=quantile.xaxis, aes(xintercept=lq.axis),linetype=\"dashed\", size=0.7) + \n#   geom_vline(data=quantile.xaxis, aes(xintercept=uq.axis),linetype=\"dashed\", size=0.7) + \n#   geom_text(data = b.fleet4.lab, aes(x = x, y = y, label = lab), size = 4) +\n#   geom_text(data = b.fleet5.lab, aes(x = x, y = y, label = lab), size = 4) +\n#   geom_text(data = b.fleet6.lab, aes(x = x, y = y, label = lab), size = 4)\n# B_FLEET\n\nB_FLEET<-ggplot(results.fleet,aes(x=as.numeric(Catch_1000t))) + geom_histogram(fill=\"red\", binwidth = (max.xaxis)/nbins, aes(y=..density..)) +\n  facet_wrap(~Strategy, ncol=1)+ylab(\"Density\")+xlab(xaxis.label)+\n  labs(title=plot.title) +\n  theme(panel.background = element_blank(), panel.grid.major=element_blank(), panel.grid.minor=element_blank(),axis.line=element_line(colour=\"Black\"), axis.text=element_text(colour=\"Black\"))+\n  #  geom_text(data = b.species3.lab, aes(x = x, y = y, label = lab), size = 4) +\n  #theme(legend.position = \"none\")+ \n  coord_cartesian(ylim = c(0, as.numeric(max.yaxis)*1.1), xlim = c(0, as.numeric(max.xaxis))) +\n  #scale_x_continuous(limits=c(0,as.numeric(max.xaxis)))+ scale_y_continuous(limits=c(0,as.numeric(max.yaxis))) +\n  theme(legend.position = \"none\")+ xlim(c(0,as.numeric(max.xaxis))) +\n  # median, Blim and Bpa lines and labels\n  geom_vline(data=ResultMedian, aes(xintercept=median.species),linetype=\"dotted\", size=0.7) +\n  geom_vline(data=quantile.xaxis, aes(xintercept=lq.axis),linetype=\"dashed\", size=0.7) + \n  geom_vline(data=quantile.xaxis, aes(xintercept=uq.axis),linetype=\"dashed\", size=0.7) + \n  geom_text(data = b.fleet4.lab, aes(x = x, y = y, label = lab), size = 2) +\n  geom_text(data = b.fleet5.lab, aes(x = x, y = y, label = lab), size = 2) +\n  geom_text(data = b.fleet6.lab, aes(x = x, y = y, label = lab), size = 2)\nB_FLEET\n\nggsave(B_FLEET, file=paste(species[species.index],\"_\", fleet.names[fleet.index],\".jpg\", sep=\"\"), dpi=600, width=4, height=16)\n\n# data in results.t varies over several magnitudes -> let's cut this output\n# note that this works for particular species but not for the total catch\n# if you want to use the whole set comment out the following line\n#results.t<-subset(results.t, Catch_1000t>0 & Catch_1000t<1e4)\n\n# in addition we can also try and change the bandwidth of the density plot later to get a nicer graph, default value =1\n#adjustment=1\n\n\n#save plots\n#my.out.file      <- '../output/fleet_data'\n\n\n\nstrategy",
    "created" : 1486141655086.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2300145154",
    "id" : "5856C32",
    "lastKnownWriteTime" : 1484667831,
    "last_content_update" : 1484667831,
    "path" : "C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotFleetEndDistributions.R",
    "project_path" : "PlotFleetEndDistributions.R",
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}