{
    "collab_server" : "",
    "contents" : "# INITIALISATION START ===============================================================================================\n\nrm(list = ls())\n\nsource(\"share_tools.R\")\n\nlibrary(reshape2)\nlibrary(data.table)\n\n#root results path\nroot.plot = \"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1-4_220117/Plots/\"\nroot.results = \"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1-4_220117/Results/\"\n\n# INITIALISATION END ===============================================================================================\n\n\n# FUNCTIONS START ===============================================================================================\n\ncalcLast5YearSum = function(folder.and.filename, val.col.name, path.to.results.folder)\n#outputs as a table the total catch or landings for the last 5 years\n{\n  \n  #load the quota\n  dt = fread(paste(path.to.results.folder, folder.and.filename, sep=\"\"), skip=7, header=T)\n  \n  #Create table for last 5 years\n  dt.melted = melt(dt, id=names(dt)[1:5])\n  \n  #change name of timestep column to be more relevant\n  names(dt.melted)[names(dt.melted)==\"variable\"] = \"TimeStep\"\n  \n  #Change type of column\n  dt.melted$TimeStep = as.numeric(dt.melted$TimeStep)\n  \n  #filter out the last 5 years\n  dt.melted = dt.melted[TimeStep>15]\n  #calc sum by strategy\n  dt.Last5YearSum.byStrategy = dt.melted[,.(Last5YearSum=sum(value)), by=.(StrategyName,ModelID)]\n  \n  #change the name of the column to one specified in params so that when we merge two tables\n  #we have column names that refer to data that the last 5 year mean was calculated for\n  names(dt.Last5YearSum.byStrategy)[names(dt.Last5YearSum.byStrategy)==\"Last5YearSum\"] = val.col.name\n  \n  return(dt.Last5YearSum.byStrategy)\n\n}\n\nisValidValuesInFile = function(file.name.with.path, col.data.starts)\n#count how many values aren't NA and if there is at least one then return that file is valid\n{\n  dt = fread(file.name.with.path, skip=7, header=T)\n  data.only = dt[1:nrow(dt), col.data.starts:ncol(dt)]\n  file.valid = FALSE\n  if(sum(data.only!=-9999)>0) {file.valid = TRUE}\n  return (file.valid)\n}\n\n# FUNCTIONS END ===============================================================================================\n\n\n# SCRIPT START  ===============================================================================================\n\n#get a list of all the groups\nunique.groups = LoadUniqueGroups(root.results)\n\n#Create a data.table in which to compile all the tables from each file ready for saving to csv\ndt.all = data.table()\n\nfor(igroup in unique.groups)\n{\n  \n  #get a list of all the files in HCRQuota_Targ folder that are for \"AllFleets\"\n  hcr.quota.targ.file = GetFileName_ContainsStrings(FolderPath = paste(root.results, \"/HCRQuota_Targ/\", sep=\"\"), \n                                                    Strings = c(\"AllFleets\", igroup), WithPath=T)\n  #get a list of all the files in CatchTrajectories that are for \"AllFleets\"\n  catches.file = GetFileName_ContainsStrings(FolderPath = paste(root.results, \"/CatchTrajectories/\", sep=\"\"), \n                                             Strings = c(\"AllFleets\", igroup), WithPath=T)\n  \n  #Determine file is valid\n  if(!isValidValuesInFile(file.name.with.path = hcr.quota.targ.file, col.data.starts = 6)) next\n  if(!isValidValuesInFile(file.name.with.path = catches.file, col.data.starts = 6)) next\n  \n  #load the files and sum\n  quota = calcLast5YearSum(\"HCRQuota_Targ/HCR_Quota_Targ_Cod (adult)_GroupNo14_AllFleets.csv\", \"quota.last5yearsum\", root.results)\n  catch = calcLast5YearSum(\"CatchTrajectories/TotalCatchYearly_Cod (adult)_GroupNo14_AllFleets.csv\", \"catch.last5yearsum\", root.results)\n  \n  #merge the two together so that we can easily calculate the difference between two columns\n  dt = merge(quota, catch, by = c(\"StrategyName\", \"ModelID\"))\n  dt[, \"diff\"] = dt[,\"catch.last5yearsum\"] - dt[,\"quota.last5yearsum\"]\n  \n  #Check where the catch is greater than or less than the quota\n  dt[, \"Catch.greater.than.quota\"] = dt$diff>=0\n  dt[, \"Catch.less.than.quota\"] = dt$diff<0\n  \n  #For each strategy count how many models with catches above and below quota and merge them together\n  NumberAbove = dt[,.(NumberAbove=sum(Catch.greater.than.quota)), by=.(StrategyName)]\n  NumberBelow = dt[,.(NumberBelow=sum(Catch.less.than.quota)), by=.(StrategyName)]\n  dt.counts.temp = merge(NumberAbove,NumberBelow, by = c(\"StrategyName\"))\n  \n  #Create new column that turns the counts into percentages\n  dt.counts.temp$PercentAbove = dt.counts.temp$NumberAbove/(dt.counts.temp$NumberAbove+dt.counts.temp$NumberBelow)*100\n  dt.counts.temp$PercentBelow = dt.counts.temp$NumberBelow/(dt.counts.temp$NumberAbove+dt.counts.temp$NumberBelow)*100\n\n  #add column with groupname to differentiate after binding\n  dt.counts.temp = cbind(data.table(GroupName = rep(igroup, dim(dt.counts.temp)[1])), dt.counts.temp) \n  \n  #bind them all together ready to be saved to csv\n  dt.all = rbind(dt.all, dt.counts.temp)\n  \n}\n\n#finally save the table to csv\nwrite.csv(dt.all, paste(root.plot, \"Tables/Percentage_Catches_Above_Below_Quota.csv\", sep=\"\"))\n\n# SCRIPT END  ===============================================================================================\n",
    "created" : 1487706321219.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3357538129",
    "id" : "7E2CA9E2",
    "lastKnownWriteTime" : 1487779369,
    "last_content_update" : 1487779369049,
    "path" : "C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Calc_Percent_Catch_Above_Below_Quota.R",
    "project_path" : "Calc_Percent_Catch_Above_Below_Quota.R",
    "properties" : {
        "source_window_id" : "",
        "tempName" : "Untitled1"
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}