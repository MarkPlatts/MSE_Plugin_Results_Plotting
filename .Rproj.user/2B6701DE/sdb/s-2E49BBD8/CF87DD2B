{
    "collab_server" : "",
    "contents" : "# Functions ---------------------------------------------------------------\nuse_GGPLOT = function(plotdata, variable_to_plot, fill_with_variable){\n\n  B_SPECIES = ggplot(plotdata$results.species,aes(x=get(variable_to_plot), fill=get(fill_with_variable)))\n  B_SPECIES = B_SPECIES + geom_histogram(binwidth = (plotdata$max.axis$x)/number_bins, aes(y=..density..))\n  B_SPECIES = B_SPECIES + facet_wrap(~Strategy, ncol=1)\n  B_SPECIES = B_SPECIES + ylab(\"Density\") + xlab(plotdata$xaxis.label[result.index]) #xlab(\"Minimum Biomass (1000 t)\")\n  B_SPECIES = B_SPECIES + labs(title=paste(plotdata$species_in_resultsfile[species.index[1]], \"\\n\", plotdata$result.names[result.index], sep=\"\"))\n  B_SPECIES = B_SPECIES + theme(strip.text = element_text(size=6), panel.background = element_blank(), panel.grid.major=element_blank(), panel.grid.minor=element_blank(),axis.line=element_line(colour=\"Black\"), axis.text=element_text(colour=\"Black\", size=6))\n  if(plotdata$result.names[result.index] ==\"BiomassEnd\" || plotdata$result.names[result.index]==\"BiomassMin\"){\n    B_SPECIES = B_SPECIES + geom_text(data = plotdata$blim.species3.lab, aes(x = x, y = y, label = lab), size = 2)\n    B_SPECIES = B_SPECIES + geom_text(data = plotdata$bpa.species3.lab, aes(x = x, y = y, label = lab), size = 2)\n    B_SPECIES = B_SPECIES + geom_vline(data=plotdata$blim.bpa.xaxis, aes(xintercept=blim.axis),linetype=\"dotdash\", size=0.15)\n    B_SPECIES = B_SPECIES + geom_vline(data=plotdata$blim.bpa.xaxis, aes(xintercept=bpa.axis),linetype=\"longdash\", size=0.15)\n    B_SPECIES = B_SPECIES + geom_text(data = plotdata$bpa.species5.lab, aes(x = x, y = y, label = lab), size = 2, angle=90, vjust=-0.5)\n    B_SPECIES = B_SPECIES + geom_text(data = plotdata$blim.species5.lab, aes(x = x, y = y, label = lab), size = 2, angle=90, vjust=-0.5)\n  }\n  B_SPECIES = B_SPECIES + coord_cartesian(ylim = c(0, as.numeric(plotdata$max.axis$y)*1.1), xlim = c(0, as.numeric(plotdata$max.axis$x)))\n  # median, Blim and Bpa lines and labels\n  B_SPECIES = B_SPECIES + geom_vline(data=plotdata$ResultMedian.species, aes(xintercept=median.species),linetype=\"dotted\", size=0.15)\n  B_SPECIES = B_SPECIES + geom_text(data = plotdata$b.species4.lab, aes(x = x, y = y, label = lab), size = 2, angle=90, vjust=-0.5)\n  if(plotdata$result.names[result.index]==\"DiscardMortalities\" || plotdata$result.names[result.index]==\"DiscardSurvivals\" || plotdata$result.names[result.index]==\"Landings\"){\n    geom_text(data = plotdata$c.species4.lab, aes(x = x, y = y, label = lab), size = 2, angle=90, vjust=-0.5)+\n    geom_text(data = plotdata$c.species5.lab, aes(x = x, y = y, label = lab), size = 2, angle=90, vjust=-0.5)+\n    geom_text(data = plotdata$c.species6.lab, aes(x = x, y = y, label = lab), size = 2, angle=90, vjust=-0.5)\n  }\n  return(B_SPECIES)\n}\n\n#Adds the regulation to a dataframe if it is present in the strategy name\nAdd_Reg = function(list2ammend){\n  list2ammend$Regulation = \"Other\"\n  list2ammend$Regulation[grep(\"Highest value\", list2ammend$Strategy)] = \"Highest value\"\n  list2ammend$Regulation[grep(\"Weakest stock\", list2ammend$Strategy)] = \"Weakest stock\"\n  list2ammend$Regulation[grep(\"Selective\", list2ammend$Strategy)] = \"Selective\"\n  list2ammend$Regulation = as.factor(list2ammend$Regulation)\n  return(list2ammend)\n}\n\n### Select name of species you would like to analyse\nspecies.select <- function(species_in_resultsfile, species_in_biomrefsfile){\t# function returns a vector with numerical species indices\n  # corresponding to the species index in each data file\n  species.input.exists_in_resultscsv<-FALSE\t# logic labels telling us if we have selected a valid species\n  species.input.exists_in_biomrefs<-FALSE\n  \n  if(interactive()) {\t# need to run this interactively to enter species name\n    \n    found_in_both_resultscsv_and_biomrefs = FALSE\n    \n    while(!found_in_both_resultscsv_and_biomrefs)\n    {\t# continue until we have found the correct species\n      \n      species.input<-readline(\"Input species name: \")\n      \n      list[species.input.exists_in_resultscsv,species.index.where_in_resultscsv_list] = find_species_in_file(species.input, species_in_resultsfile, \"Results.csv\")\n      list[species.input.exists_in_biomrefs, species.index.where_in_biomrefscsv_list] = find_species_in_file(species.input, species_in_biomrefsfile, \"Biom_refs.csv\")\n      \n      if(species.input.exists_in_resultscsv & species.input.exists_in_biomrefs) found_in_both_resultscsv_and_biomrefs = TRUE\n      \n    }\n    \n    print(c(\"Selected species from Results.csv is: \", species_in_resultsfile[species.index.where_in_resultscsv_list]))\n    print(c(\"Species name from  Blim.Bpa.csv: \", species_in_biomrefsfile[species.index.where_in_biomrefscsv_list]))    \n    \n  } else {\n    \n    print('You need to run this script in interactive mode.')\n    \n  }\n  \n  return(c(species.index.where_in_resultscsv_list, species.index.where_in_biomrefscsv_list))\t# function returns a vector with numerical species indeces\n  \n}\n\n\nfind_species_in_file = function(species.input, species_list_in_file, filename){\n  #does this species exist in file, i.e. Results.csv?\n  \n  species.index.where_in_list<-grep(as.character(species.input), ignore.case=TRUE, species_list_in_file)\n  \n  if (length(species.index.where_in_list)==0) {\t\t\t# no species found\n    print(paste(\"No matching species found in \", filename))\n    species.input.exists = FALSE\n  }\n  \n  if (length(species.index.where_in_list)==1) {\t\t\t# found exactly one species from Results.csv\n    species.input.exists= TRUE\n  }\n  \n  if (length(species.index.where_in_list)>1) {\t\t\t# more than one species found\n    list[species.input.exists,species.index.where_in_list] <- select_which_in_list(species.index.where_in_list, species_list_in_file)\n  }\n  \n  return(list(species.input.exists,species.index.where_in_list))\n  \n}\n\n\nselect_which_in_list = function(species.index.where_in_resultscsv_list, species_list_in_file){\n#if found more than one species with name in list get user to choose which one\n\n  species.select.3 = FALSE\n  print(c(\"Found more than one species containing this name\"))\n  \n  #BUG 13/1/17 why does species_in_resultsfile not get passed in\n  Possible_Species<-species_list_in_file[species.index.where_in_resultscsv_list]\t\t# generate a data.frame to display species to choose from\n  display.data.frame<-data.frame(Possible_Species, species.index.where_in_resultscsv_list)\n  while(!species.select.3){\t\t\t# select one from shortlist\n    print(c(\"Please select index from:\"))\n    print(display.data.frame)\n    select.index<-readline(\"Select species number \")\n\n    valid<-(match(select.index, species.index.where_in_resultscsv_list))\t# have we selected a valid index?\n    if (!is.na(valid)){\n      species.input.exists_in_list<-TRUE\n      species.select.3<-TRUE\n      species.index.where_in_list<-as.integer(select.index)\t\t# set species.index.where_in_resultscsv_list to the species we are working with now\n    }  \n  }\n  return(list(species.input.exists_in_list,species.index.where_in_list))\n}\n\n\n\n\n\n\n### Scale axes\nscale.axis.nice <- function(max) {\n\n  scale.base=c(1,2,2.5,3,5,7.5,10)\t\t# let's use scales whose maximum is a multiple of the scale.base, e.g. 100, 200, or 250\t\n  \n  exp<-0\n  base.index<-1\n  flag<-c(FALSE, FALSE)\n  while(flag[1]!=TRUE){\n    if(max>10^exp && max<10^(exp+1)) {\t# we found the correct range between 1eX and 1e(X+1), e.g. 100 & 1000\n      flag[1]<-TRUE\n      while(flag[2]!=TRUE){\t\t\t# now let's find a \"nice\" scale based on the scale.base sequence\n\t      if(max>scale.base[base.index]*10^exp) {\t# smaller than the next value based on the scale.base sequence\n\t        base.index<-base.index+1\n\t      } else {\n\t        flag[2]<-TRUE\n\t      }\n      }\n    } else {\n      if(max<10^(exp+1)) {\t\t\t# we need to check whether the exponent needs to be increased or decreased to \tfind the correct range\n\t      exp<-exp-1\n      }\n      else {\n        exp<-exp+1\n      }\n    }\n  }  \n  max.nice<-scale.base[base.index]*10^exp\n  \n  max.nice\n}\n\n\nscale.axes <- function(data.set, median, a, b) {\n  \n# find the maximum of density functions\n  max.xaxis<-as.numeric(format(max(data.set$x), scientific=TRUE))\n  max.yaxis<-as.numeric(format(max(data.set$y), scientific=TRUE))\n  \n# sometimes median, Blim or Bpa are larger than the max of the density function!\n  max.xaxis<-max(max.xaxis, median[,2], a, b)\n\n# now scale \"nicely\"  \n  scale<-c(scale.axis.nice(max.xaxis), scale.axis.nice(max.yaxis))\n\n  return(scale)\n  \n}\n\nscale.axes.hist <- function(data, median, a, b, nbins, nUniqueStrategies) {\n\n  #calculate what the x limits are\n  max.xaxis<-as.numeric(format(max(data[[1]]$tx1K_km2, median[,2], a, b), scientific=TRUE))\n  if (length(data)>1){\n    for (iStrategy in 2:nUniqueStrategies){\n      max.xaxis<-as.numeric(format(max(max.xaxis, data[[iStrategy]]$tx1K_km2), scientific=TRUE))\n    }\n  }\n  min.xaxis<- 0\n  \n  #calc size of breaks\n  sizeofbreak = (max.xaxis-min.xaxis)/nbins #calc size of bins\n  #max.xaxis<-max(max.xaxis, median[,2], a, b)\n  \n  #calculate for data what maximum y value is\n  breaks=seq(min.xaxis, max.xaxis, sizeofbreak) #determine a vector of where the bins should begin\n\n  max.yaxis=-9999\n  for (iStrategy in 1:nUniqueStrategies){\n    datacut = cut(data[[iStrategy]]$tx1K_km2, breaks, right=FALSE)\n    freqtab = table(datacut) #create the table\n    freqvec = as.numeric(freqtab)\n    propvec = freqvec/sum(freqvec)  #convert into proportions\n    densityvec = propvec/sizeofbreak\n    max.yaxis = as.numeric(format(max(max.yaxis,densityvec), scientific=TRUE))\n    \n  }\n  \n  return(list(x=max.xaxis, y=max.yaxis))\n\n}\n\n\n\n### select the ResultName\nresult.name.select <- function(result.names) {\n  Resultname<-result.names\t\t# generate a data.frame to display ResultNames to choose from\n  Index<-c(1:length(result.names))\n  display.data.frame<-data.frame(Resultname, Index)\n\n  result.select<-FALSE\n\n  while(!result.select){\t\t# select one from shortlist\n    print(c(\"Please select Result name from:\"))\n    print(display.data.frame)\n    result.index<-as.numeric(readline(\"Enter index number \"))\n    valid<-(match(result.index, Index))\t# have we selected a valid index?\n    if (!is.na(valid)){\n      result.select<-TRUE\n    }\n  }\n  \n  result.index\t\t\t\t# return result.index\n\n}\n\n### select the MethodName\nmethod.name.select <- function(method.names) {\n\n  Methodname<-method.names\t\t# generate a data.frame to display ResultNames to choose from\n  Index<-c(1:length(method.names))\n  display.data.frame<-data.frame(Methodname, Index)\n\n  method.select<-FALSE\n\n  while(!method.select){\t\t# select one from shortlist\n    print(c(\"Please select fisheries method from:\"))\n    print(display.data.frame)\n    method.index<-as.numeric(readline(\"Enter index number \"))\n    valid<-(match(method.index, Index))\t# have we selected a valid index?\n    if (!is.na(valid)){\n      method.select<-TRUE\n    }\n  }\n  \n  method.index\t\t\t\t# return method.index\n\n}\n\n\n",
    "created" : 1488214091402.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "488084379",
    "id" : "CF87DD2B",
    "lastKnownWriteTime" : 1488537722,
    "last_content_update" : 1488537722526,
    "path" : "C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions.r",
    "project_path" : "PlotEndDistributions.r",
    "properties" : {
        "source_window_id" : ""
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}