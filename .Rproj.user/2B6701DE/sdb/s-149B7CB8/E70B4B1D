{
    "collab_server" : "",
    "contents" : "\n    library(rgl)\n    \n    \n    plotresults = function()\n    \n    {\n    \n    r_start = 0.3\n    r_end = 1\n    r_step = 0.1\n    nsteps = (r_end-r_start)/r_step+1\n    \n    riskstart = 0.01\n    riskend = 1\n    risksteps = 0.005\n    \n    #listmodels = list(NULL)\n    predicted = matrix(ncol=3, nrow=0)\n    \n    plotcols=NULL\n    \n    for(i in 1:((r_end-r_start)/r_step+1))\n      {\n      plotcols = c(plotcols, rep(i, (riskend-riskstart)/risksteps+1))\n      }\n      \n    risk=NULL\n    rout=NULL\n    foregone=NULL\n    #colour = \n    \n    i=1\n    \n    for (r in seq(r_start,r_end,r_step))\n      {\n      results = species2(r, riskstart, riskend, risksteps)\n      #risk = c(risk, output$risk)\n      #rout = c(rout,rep(r, length(output$risk)))\n      #foregone = c(foregone, output$foregone)\n      #listmodels = list(listmodels, list(r = r, mod = lm(results$foregone ~ poly(results$risk, 3))))\n      model = lm(results$foregone ~ poly(results$risk, 3))\n      foregone = predict(model)\n      combined = matrix(c(rep(r,(riskend-riskstart)/risksteps+1), seq(riskstart,riskend,risksteps), foregone),byrow=F, ncol=3)\n      predicted = rbind(predicted,combined)\n      }\n   \n    # predict the values for each r\n    #persp(predicted[,1], predicted[,2], predicted[,3], phi = 45, theta=45, xlab = \"r\", ylab = \"risk\", zlab = \"Foregone Yield\", main = \"The relationship between r, risk and foregone yield\")\n    plot3d(predicted[,1], predicted[,2], predicted[,3], col=plotcols, size=3, xlab = \"r\", ylab = \"risk\", zlab = \"Foregone Yield\")\n    }\n    \n    species2 = function(r, riskstart,riskend,risksteps)\n    \n    {\n      #set how many years to run the model for when testing risk\n      nYears = 3\n      \n      #setup the variables for risk values\n    \n      #init outputs\n      #effort=NULL\n      catch=numeric((riskend-riskstart)/risksteps)\n      \n      #read in the parameters for the 2 species\n      SpeciesParams = as.matrix(read.csv(\"C:/Documents and Settings/localuser/My Documents/DefineIt/Code/R/speciesparams.csv\", sep=\",\", header=T))\n    \n      # set the species parameter for species B to r (this enables us to get results for a range of r's\n      SpeciesParams[2,4]=r\n    \n      #Calc optimum catch for species A\n      maxcatch = optimcatch(SpeciesParams[1,])[[2]]\n    \n      #Create vector for risk\n      risk = seq(riskstart, riskend, risksteps)\n    \n      i=1\n        #browser() \n      #Determine the level of effort that subjects species B to a given level of risk\n      for(risk in seq(riskstart,riskend,risksteps))\n        {\n        #calc the effort that would subject vulnerable species (B) to each level of risk\n        effort=optimbreach(nYears,risk, SpeciesParams[2,])[[1]]\n    \n        #calc the catch of target species (A) for effort calculated in previous line\n        catch[i]=maxcatch-meancatch(effort, SpeciesParams[1,])\n        \n        #if(catch[length(catch)]>200){browser()}\n        i=i+1\n        }\n        \n        #plot(x=seq(riskstart,riskend,risksteps), y=catch, xlab = \"risk\", ylab=\"Foregone Yield\")\n        output = list(risk=seq(riskstart,riskend,risksteps), foregone=catch)\n        return (output)\n        \n       \n            \n    }\n    \n      \n    RunDisplay = function(nTimeSteps, e) # e=effort, nTimeSteps=number of timesteps per run\n    #Runs the model and outputs the biomass and catches as two timeseries plots\n      {\n    \n      output = RunModelnTimeSteps(nTimeSteps, stddevr_global, r_global, Init_B_global, k_global, q_global, e, 0)\n    \n      split.screen(c(1,2))\n      screen(1)\n      plot(output[[2]], ylim=c(0,k_global), type=\"l\", ylab=\"Biomass\", xlab=\"Timestep\")\n      screen(2)\n      plot(output[[3]], ylim=c(0,k_global), type=\"l\", ylab=\"Catch\", xlab=\"TimeStep\")\n    \n      }\n      \n    displayProbEff = function()\n    #A simple subroutine that graphs the change in probability of breaching Bpa for different efforts\n      {\n    \n      prob_lessBpa = NULL\n      for(x in seq(0,2,0.02))\n        {\n        prob_lessBpa=c(prob_lessBpa,calcprob(x,3,Bpa_global))\n        }\n      plot(x=seq(0,2,0.02), y=prob_lessBpa, ylab=\"Probability\", xlab=\"Effort\")\n    \n      }\n    \n    optimbreach = function(nTimeSteps, opt_prob, spec_params)\n    #Calculates the level of effort that meets management objective\n    #nTimeSteps is length of time to run simulation while checking not falling beneath Bpa\n    #opt_prob is the maximum probability of going beneath Bpa in a given time period (see previous line)\n    #that is acceptable by the management objective\n    \n      {\n      \n      diffprob = function(e, params, spec_params)\n        {\n        nTimeSteps=params[1]\n        opt_prob=params[2]\n        prob_breach = calcprob(e, nTimeSteps, spec_params)\n        (prob_breach-opt_prob)^2\n        }\n        \n    \n      params=c(nTimeSteps, opt_prob)  \n      a=optimise(diffprob, c(0,1.5), params, spec_params, maximum=FALSE)\n      #browser()\n      a\n      \n      }\n      \n    optimcatch = function(species_params)\n    #Calculates the effort that gives the optimum catch\n      {\n        \n      optimise(meancatch, c(0,2), species_params, maximum=TRUE)\n      \n      }\n      \n    meancatch = function(ef, species_params)\n      {\n      output=RunModelnTimeSteps(nTimeSteps=1000, species_params, ef)  \n      mean(output[[3]])\n      }\n      \n    calcmeans = function(effort)\n    #Calculates the mean catch and biomass over 1000 timesteps\n      {\n      \n      output = RunModelnTimeSteps(1000, species_params, e)\n      print(paste(\"Mean Biomass = \", mean(output[[2]])))\n      print(paste(\"Mean Catch = \", mean(output[[3]])))\n      \n      }\n    \n    RunModelnTimeSteps = function(nTimeSteps, sparams, e)\n    #Runs the surplus production model for nTimeSteps\n      {\n      #indexes in sparams for various parameters\n      #Bpa = 2\n      #sd_ = 3\n      #r = 4\n      #B = 5\n      #k = 6\n      #q_ = 7 \n      \n      P = 0                         #initial production\n    \n      Breached = FALSE              #This records whether the biomass fell beneath Bpa\n      Biomass = numeric(nTimeSteps)                #biomass\n      Catch = numeric(nTimeSteps)          #catch\n      \n      Biomass[1]=sparams[5]\n      Catch[1]=2\n                               \n      for (x in 2:nTimeSteps)\n        {\n        ModOutput = RunTimeStep(sparams[3], sparams[4], Biomass[x-1], sparams[6], sparams[7], e)  #Run the model for 1 timestep\n    \n        Biomass[x] = ModOutput[1]  #Get the biomass at end of timestep\n    \n        Catch[x] = ModOutput[2]  #Get the catch for this timestep\n        #print(Biomass[x])\n        #print(sparams[2])\n        if (Biomass[x]<=sparams[2])  #Check if biomass has fallen beneath Bpa\n          {                            \n          Breached=TRUE\n          if(Biomass[x]<0){Biomass[x]=0}\n          }      \n        }\n      #if(Bpa==600){browser()   }\n      list(Breached, Biomass, Catch)\n    \n      }\n    \n      \n    RunTimeStep = function(sd_, r, B, k, q_, e)\n    #Calculates one timestep of the model\n    #outputs the biomass[1] at the end of the timestep and catches[2] through timestep\n      {\n      \n      change_r = rnorm(n=1, mean=0, sd=sd_) #random change in r\n      P = (r + change_r) * B * (1-B/k)  #calc production\n      Catch = q_ * e * B  #calc catch\n      B = B + P - q_*e*B  #calc results biomass\n      c(B,Catch)  #output biomass at end of timestep and catch\n      \n      }\n    \n    \n    calcprob = function(e, nTimeSteps, species_params) # e=effort, Bpa=precautionary biomass limit, nTimeSteps=number of timesteps per run\n    #Calculates the probability of going beneath Bpa within nTimeSteps\n      {\n    \n      nIterations = 200            #number of times the simulation is run\n      nFails = 0                    #Counts the number of times the biomass goes benath Bpa\n      \n      nFails = RunModelnTimeSteps2(nTimeSteps, species_params, e, nIterations)\n      \n      nFails/nIterations\n        \n      }\n      \n      \n    RunModelnTimeSteps2 = function(nTimeSteps, sparams, e, nIterations)\n    #Runs the surplus production model for nTimeSteps\n      {\n      #indexes in sparams for various parameters\n      #Bpa = 2\n      #sd_ = 3\n      #r = 4\n      #B = 5\n      #k = 6\n      #q_ = 7 \n      \n      P = 0                         #initial production\n    \n      Breached = rep(F,nIterations)              #This records whether the biomass fell beneath Bpa\n      Biomass = matrix(nrow=nTimeSteps, ncol=nIterations)                #biomass\n      Catch = matrix(nrow=nTimeSteps, ncol=nIterations)          #catch\n      randomvalues = matrix(rnorm(nTimeSteps*nIterations,0,sparams[3]),ncol=nIterations)\n      \n      Biomass[1,]=sparams[5]\n      Catch[1,]=2\n      \n      #ModOutput = RunTimeStep2(sparams[3], sparams[4], Biomass[x-1,], sparams[6], sparams[7], e)\n                               \n      for (x in 2:nTimeSteps)\n        {\n        #ModOutput = RunTimeStep2(sparams[3], sparams[4], Biomass[x-1,], sparams[6], sparams[7], e) #Run the model for 1 timestep\n    \n        P = (sparams[4] + randomvalues[x,]) * Biomass[x-1] * (1-Biomass[x-1]/sparams[6])  #calc production\n        Catch[x,] = sparams[7] * e * Biomass[x-1]\n        Biomass[x,] = Biomass[x-1,] + P - Catch[x,]\n    \n        Breached = ifelse (Biomass[x,]<=sparams[2], T, Breached)\n        ifelse (Biomass[x,]<0,0,Biomass[x,]) \n        \n        }\n      \n      #if(Bpa==600){browser()   }\n    \n      sum(Breached)\n      }",
    "created" : 1480235615737.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2974409367",
    "id" : "E70B4B1D",
    "lastKnownWriteTime" : 1331652712,
    "last_content_update" : 1331652712,
    "path" : "X:/Work/Fisheries Science/DefineIt/Code/R/optim_effort for catch3.r",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}