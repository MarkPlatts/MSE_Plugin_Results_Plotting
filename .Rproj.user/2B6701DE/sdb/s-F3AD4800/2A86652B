{
    "collab_server" : "",
    "contents" : "# INITIALISATION START ===============================================================================================\n\n#start with a clean sheet\nrm(list = ls())\n\n#load libraries\nsource(\"share_tools.R\")\n\n#root results path\nroot.plot =     \"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1-4_220117/Plots/\"\nroot.results =  \"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1-4_220117/Results/\"\n\nhcr.folders = c(\"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/NorthSea Model/2015 FINAL Key Run/DATA/HCRs/Type1_BmsytoZero\",\n                \"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/NorthSea Model/2015 FINAL Key Run/DATA/HCRs/Type2_BmsyBlimClifftoZero\",\n                \"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/NorthSea Model/2015 FINAL Key Run/DATA/HCRs/Type3_BmsytoZeroatBlim\",\n                \"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/NorthSea Model/2015 FINAL Key Run/DATA/HCRs/Type4_BmsyBlimClifftoFmin\")\n\n# INITIALISATION END ===============================================================================================\n\n\n# FUNCTIONS START  ===============================================================================================\n\ngroupsWithHcr = function(hcr.folders){\n  #compiles a list of all the unique groups with a hcr in the location of folders  \n  \n  hcr.file.list = list.files(hcr.folders, full.names = TRUE)\n  \n  groups.list = vector()\n  for(iFile in hcr.file.list){\n    dt = fread(iFile, skip=1, header=T)\n    groups.list = c(groups.list, dt$GroupNameForF)\n  }\n  \n  groups.unique.in.hcrs = unique(groups.list)\n  \n  return(groups.unique.in.hcrs)\n  \n}\n\n\n\n\ngetStrategyTable = function(hcr.folders){\n  #load up all the hcrs into memory so that we can access and use the values when comparing with realised F's\n  \n  #compile a vector with the filenames and associated paths for all hcr files\n  hcr.file.list = list.files(hcr.folders, full.names = TRUE)\n  \n  strategies = data.table()\n  \n  for(iStrategy in hcr.file.list){\n    #get strategy name and the hcrs it contains\n    strategy.name = sub(pattern = \"(.*)\\\\..*$\", replacement = \"\\\\1\", basename(iStrategy))\n    strategy.name = gsub(\"_hcr\", \"\", strategy.name)\n    strategy.table = fread(iStrategy, skip=1, header=T)\n    \n    #create table from strategy name and hcrs and append to overall strategies data.table\n    strategy.table = appendVariableToDataTable(strategy.table, strategy.name, variablename = \"StrategyName\", beg=TRUE, end=FALSE)\n    strategies = rbind(strategies, strategy.table)\n  }\n  \n  return (strategies)\n  \n}\n\n\n# FUNCTIONS END  ===============================================================================================\n\n\n\n# SCRIPT START  ===============================================================================================\n\nif(TRUE){\n  #get a list of all the groups\n  unique.groups = groupsWithHcr(hcr.folders)\n  \n  #get a list of strategy.tables with strategy name\n  strategies.table = getStrategyTable(hcr.folders)\n  \n  #remove all conservation hcrs from strategy table\n  strategies.table = filter(strategies.table, Target_or_Conservation==0)\n  \n  #Create a data.table in which to compile all the tables from each file ready for saving to csv\n  dt.all = data.table()\n  \n  for(igroup in unique.groups)\n  {\n    \n    #get the file in HCRQuota_Targ folder that are for \"AllFleets\"\n    realisedF.file = GetFileName_ContainsStrings(FolderPath = paste(root.results, \"/HCRQuota_Targ/\", sep=\"\"), \n                                                 Strings = c(igroup), WithPath=T)\n    #get a list of all the files in CatchTrajectories that are for \"AllFleets\"\n    # catches.file = GetFileName_ContainsStrings(FolderPath = paste(root.results, \"/CatchTrajectories/\", sep=\"\"), \n    #                                            Strings = c(\"AllFleets\", igroup), WithPath=T)\n    #get the hcr\n    \n    #Determine file is valid\n    # if(!isNotAllZero(file.name.with.path = hcr.quota.targ.file, col.data.starts = 6)) next\n    # if(!isNotAllZero(file.name.with.path = catches.file, col.data.starts = 6)) next\n    \n    #load the files and sum\n    realised.f = calcLast5Year(realisedF.file, \"realised.f.last5yearsum\", 5, function.type = 2)\n    \n    #add a column with the group name - need this to merge with the strategy data.table\n    realised.f = appendVariableToDataTable(dt=realised.f, variable=igroup, variablename=\"GroupNameForF\", beg=TRUE, end=FALSE)\n    \n    #merge the two together so that we can easily calculate the difference between two columns\n    dt = merge(x=realised.f, y=strategies.table, by = c(\"StrategyName\", \"GroupNameForF\"), all.x = TRUE)\n    dt = cbind(dt,data.table(realf.maxf.diff = dt[,realised.f.last5yearsum] - dt[,MaxF]))\n    \n    #Check where the catch is greater than or less than the quota\n    dt[, \"RealisedF.greater.than.maxF\"] = dt$realf.maxf.diff>=0\n    dt[, \"RealisedF.less.than.maxF\"] = dt$realf.maxf.diff<0\n    \n    #For each strategy count how many models with realisedFs above and below maxFs and merge them together\n    NumberAbove = dt[,.(NumberAbove=sum(RealisedF.greater.than.maxF)), by=.(StrategyName)]\n    NumberBelow = dt[,.(NumberBelow=sum(RealisedF.less.than.maxF)), by=.(StrategyName)]\n    dt.counts.temp = merge(NumberAbove,NumberBelow, by = c(\"StrategyName\"))\n    \n    #Create new column that turns the counts into percentages\n    dt.counts.temp$PercentAbove = dt.counts.temp$NumberAbove/(dt.counts.temp$NumberAbove+dt.counts.temp$NumberBelow)*100\n    dt.counts.temp$PercentBelow = dt.counts.temp$NumberBelow/(dt.counts.temp$NumberAbove+dt.counts.temp$NumberBelow)*100\n    \n    #add column with groupname to differentiate after binding\n    dt.counts.temp = cbind(data.table(GroupName = rep(igroup, dim(dt.counts.temp)[1])), dt.counts.temp) \n    \n    #bind them all together ready to be saved to csv\n    dt.all = rbind(dt.all, dt.counts.temp)\n    \n  }\n  \n  #finally save the table to csv\n  write.csv(dt.all, paste(root.plot, \"Tables/Percentage_RealisedF_Above_Below_maxF.csv\", sep=\"\"))\n}\n\n# SCRIPT END  ===============================================================================================\n\n\n\n# TESTING START ===================================================================================================\n\nif(FALSE){\n  \n  print(getStrategyTable(hcr.folders))\n  \n}\n\n# TESTING END ===================================================================================================",
    "created" : 1488551637416.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "2087005005",
    "id" : "2A86652B",
    "lastKnownWriteTime" : 1488551217,
    "last_content_update" : 1488551841307,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}