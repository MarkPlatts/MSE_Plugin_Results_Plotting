{
    "collab_server" : "",
    "contents" : "rm(list=ls())\n\nsetwd(\"C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/\")\nsource(\"Calc_average_quota_per_fleet_group_regulation.R\")\nsource(\"share_tools.R\")\nsource(\"riskrewardtable.R\")\nlibrary(\"dplyr\")\n\nprint(Sys.time())\n\n\n#Test\nTest__Check_Average_Quota_across_models_4_AdultCod_Fleet1_HighestValue = function()\n{\n  print(\"Test__Check_Average_Quota_across_models_4_AdultCod_Fleet1_HighestValue\")\n  \n  #Input data:\n  Group_Cod = \"Cod (adult)\"\n  Fleet_DemersalTrawl = \"FleetNo1\"\n  StrategyType_Highest_Value = \"Highest value\"\n  Test_Path = GetResultsLocation()\n  \n  #Test:\n  Cod_adult_Average_Across_Quota = Average_Quota_Across_Models_And_RegTypes(Group_Cod,Fleet_DemersalTrawl,StrategyType_Highest_Value,Test_Path)\n  Correct = c(0.0562363408,\t0.0691622814,\t0.0740509911,\t0.0683924373,\t0.0587781737,\t0.0484810997,\t0.0413565884,\t0.0390158918,\t0.0417923933,\t0.0486157672,\t0.0489791314,\t0.0408512426,\t0.0334640422,\t0.028770516,\t0.0250194448,\t0.0224817797,\t0.0219612043,\t0.021143502,\t0.0180477091,\t0.0148551648)\n  \n  #Outcome\n  if(isTRUE(all.equal(Cod_adult_Average_Across_Quota, Correct, tolerance = 1e-8))){\n    print(\"PASSED\")\n  } else{\n    print(\"FAILED\")\n    \n  }\n}\n\n\n#Test\nTest__LoadFile_ContainsListStrings = function()\n{\n  print(\"Test__LoadFile_ContainsListStrings\")\n  \n  #Input data:\n  Group_Skate_and_Ray = \"Targ_Skate + cuckoo ray\"\n  Fleet_GearsUsingHooks = \"FleetNo7\"\n  Test_Path = paste(GetResultsLocation(),\"HCRQuota_Targ/\",sep=\"\")\n  \n  #Test:\n  ResultFile = LoadFile_ContainsListStrings(Dir.Path = Test_Path, StringsInFileName = c(Group_Skate_and_Ray,Fleet_GearsUsingHooks))\n  CorrectFile = read.csv(paste(GetResultsLocation(), \"HCRQuota_Targ/HCR_Quota_Targ_Skate + cuckoo ray_GroupNo12_FleetNo7.csv\",sep=\"\"),skip=7, head=T)\n \n  #Outcome\n  if(all.equal(ResultFile,CorrectFile)){\n    print(\"PASSED\")\n  } else {\n    print(\"FAILED\")\n    \n  }\n}\n\n#Test\nTest__StringContains_StringDoesNotExist = function()\n{\n  print(\"Test__StringContains_StringDoesNotExist\")\n  \n  #input:\n  FileName = \"HCR_Quota_Targ_Benthic microflora (incl Bacteria protozoa))_GroupNo63_FleetNo3\"\n  String2test = \"Hello\"\n  \n  #Test:\n  Outcome = StringContains(FileName, String2test)\n  \n  #Results\n  if (Outcome==TRUE){\n    print(\"FAILED!\")\n    \n  }\n  if (Outcome==FALSE){\n    print(\"PASSED!\")\n  }\n  \n}\n\n\nTest__StringContains_StringDoesExist = function()\n{\n  print(\"Test__StringContains_StringDoesExist\")\n  \n  #Input:\n  FileName = \"HCR_Quota_Targ_Benthic microflora (incl Bacteria protozoa))_GroupNo63_FleetNo3\"\n  String2test = \"Benthic microflora (incl Bacteria protozoa)\"\n  \n  #Test:\n  Outcome = StringContains(FileName, String2test)\n  \n  #Result:\n  if (Outcome==TRUE){\n    print(\"PASSED!\")\n  }\n  if (Outcome==FALSE){\n    print(\"FAILED!\")\n    \n  }\n}\n\nTest__StringContains_AllStrings_StringsDoExist_FindsThem = function()\n{\n  print(\"Test__StringContains_AllStrings_StringsDoExist_Finds_Them\") \n  \n  #Input\n  MultipleStringsVector = c(\"Hello\", \"Goodbye\")\n  String_Containing_String1_and_String2 = \"Hello John, its very nice to meet you, Sorry I cant stop. Goodbye John\"\n  \n  #Test:\n  Outcome = StringContains_AllStrings(ContainingString = String_Containing_String1_and_String2,\n                                      MultipleStrings2Check = MultipleStringsVector)\n    \n  #Result:\n  if(Outcome == FALSE){\n    print(\"FAILED!\")\n    \n  }\n  if(Outcome == TRUE){\n    print(\"PASSED!\")\n  }\n}\n\nTest__StringContains_AllStrings_StringsDontExist_DoesNotFindThem = function()\n{\n  print(\"Test__StringContains_AllStrings_StringsDontExist_DoesNotFindThem\")\n  \n  #Input\n  MultipleStringsVector = c(\"Hello\", \"Goodbye\")\n  String_Containing_String1_and_String2 = \"Hello John, its very nice to meet you, Sorry I cant stop. John\"\n  \n  #Test:\n  Outcome = StringContains_AllStrings(ContainingString = String_Containing_String1_and_String2,\n                                      MultipleStrings2Check = MultipleStringsVector)\n  #Result:\n  if(Outcome == TRUE){\n    print(\"FAILED!\")\n    \n  }\n  if(Outcome == FALSE){\n    print(\"PASSED!\")\n  }\n}\n\n\nTest__SubsetVectorStrings_ContainingString__Finds_All_Highest_Value = function()\n{\n  print(\"Test__SubsetVectorStrings_ContainingString__Finds_All_Highest_Value\")\n  #Input\n  UniqueStrategies = Load_Strategies(\"../TestInput/UniqueStrategies.csv\")\n  Regulation_HighestValue = \"Highest value\"\n  CorrectStrategies = as.vector(Load_Strategies(\"../CorrectResults/Highest_value_Strategies.csv\"))\n  \n  #Test:\n  Outcome = SubsetVectorStrings_ContainingString(UniqueStrategies, Regulation_HighestValue)\n\n  #Result:\n  if(all.equal(Outcome, CorrectStrategies)){\n    print(\"PASSED!\")\n  } else {\n    print(\"FAILED!\")\n    \n  }\n}\n\n\nTest__LoadUniqueStrategies__SameUniqueFile = function()\n{\n  print(\"Test__LoadUniqueStrategies__SameUniqueFile\")\n  \n  #Input\n  Outcome = LoadUniqueStrategies(GetResultsLocation())\n  \n  #Test:\n  CorrectStrategies = as.vector(Load_Strategies(\"../TestInput/UniqueStrategies.csv\"))\n  \n  #Result:\n  if(all.equal(Outcome, CorrectStrategies)){\n    print(\"PASSED!\")\n  } else {\n    print(\"FAILED!\")\n    \n  }\n}\n\n\nTest__LoadUniqueGroups__Loads_when_file_exists = function()\n{\n  print(\"Test__LoadUniqueGroups__Loads_when_file_exists\")\n  \n  #Input\n  Correct_First_Group = \"Baleen whales\"\n  Correct_30th_Group = \"Sprat\"\n  Correct_Last_Group = \"Phytoplankton\"\n  \n  #Test:\n  Outcome = LoadUniqueGroups(paste(GetResultsLocation(),\"../TestInput/LoadsUniqueGroupsWhenExists/\",sep=\"\"))\n  \n  #Result:\n  if(Outcome[1] == Correct_First_Group & Outcome[30] == Correct_30th_Group & tail(Outcome, n=1) == Correct_Last_Group){\n    print(\"PASSED!\")\n  } else {\n    print(\"FAILED!\")\n    \n  }\n}\n\n\nTest__LoadUniqueGroups__Creates_from_results.csv_when_doesnt_exist = function()\n{\n  print(\"Test__LoadUniqueGroups__Creates_from_results.csv_when_doesnt_exist\")\n  \n  #Input\n  Correct_First_Group = \"Baleen whales\"\n  Correct_30th_Group = \"Sprat\"\n  Correct_Last_Group = \"Phytoplankton\"\n  #Get rid of old file if exists\n  if(file.exists(paste(GetResultsLocation(),\"../TestInput/CreatesUniqueGroupsWhenDoesntExist/UniqueGroups.csv\",sep=\"\"))) \n  {\n    file.remove(paste(GetResultsLocation(),\"../TestInput/CreatesUniqueGroupsWhenDoesntExist/UniqueGroups.csv\",sep=\"\"))\n  }           \n  \n  #Test:\n  Outcome = LoadUniqueGroups(paste(GetResultsLocation(),\"../TestInput/CreatesUniqueGroupsWhenDoesntExist/\",sep=\"\"))\n\n  #Result:\n  if(Outcome[1] == Correct_First_Group & Outcome[30] == Correct_30th_Group & tail(Outcome, n=1) == Correct_Last_Group){\n    print(\"PASSED!\")\n  } else {\n    print(\"FAILED!\")\n  }\n}\n\n\nTest__Calc_Biomass_Last5YearMean__Cod_adult_Model_6_Strat_10_Safegd_LowF_Weakest_stock= function()\n{\n  print(\"Test__Calc_Biomass_Last5YearMean__Cod_adult_Model_6_Strat_10_Safegd_LowF_Weakest_stock\")\n  \n  #Input\n  GroupName = \"Cod (adult)\"\n  ModelID = 6\n  Biomass_StartAverageAtTimeStep = 39\n  Path_And_FileName = \"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/R Code/TestFolder_R_Plotting_MSE_Plugin/withBiomassForcing_Yearly_Results HCR type1 and 3/Results/Biomass/BiomassYearly_Cod (adult)_GroupNo14.csv\"\n  GroupsOnly_Vars2MeltBy = c(\"GroupName\",\"ModelID\",\"StrategyName\",\"ResultType\")\n  \n  #Test:\n  Averages = Calc_Last5YearMean(Path_And_FileName, \"Biomass_Last5YearMean\", GroupsOnly_Vars2MeltBy, Biomass_StartAverageAtTimeStep)\n  calculated_value = as.numeric(filter(Averages,ModelID==6 & StrategyName == \"10 Safegd_LowF_Weakest stock\")[4])\n  \n  #Correct value\n  correct_value = 0.4603413244\n  \n  #Result:\n  if(isTRUE(all.equal(correct_value, calculated_value, 1e-7))){\n    print(\"PASSED!\")\n  } else {\n    print(\"FAILED!\")\n  }\n}\n\n\nTest__Calc_CatchLast5YearMean__Cod_adult_Model_6_Strat_10_Safegd_LowF_Weakest_stock= function()\n{\n  print(\"Test__Calc_CatchLast5YearMean__Cod_adult_Model_6_Strat_10_Safegd_LowF_Weakest_stock\")\n  \n  #Input\n  GroupName = \"Cod (adult)\"\n  ModelID = 6\n  CatchTrajectories_StartAverageAtTimeStep = 16\n  Path_And_FileName = \"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/R Code/TestFolder_R_Plotting_MSE_Plugin/withBiomassForcing_Yearly_Results HCR type1 and 3/Results/CatchTrajectories/TotalCatchYearly_Cod (adult)_GroupNo14_AllFleets.csv\"\n  GroupFleet_Vars2MeltBy = c(\"GroupName\",\"FleetName\",\"ModelID\",\"StrategyName\",\"ResultType\")\n  \n  #Test:\n  Averages = Calc_Last5YearMean(Path_And_FileName, \"Catches_Last5YearMean\", GroupFleet_Vars2MeltBy, CatchTrajectories_StartAverageAtTimeStep)\n  calculated_value = as.numeric(filter(Averages,ModelID==6 & StrategyName == \"10 Safegd_LowF_Weakest stock\")[4])\n  \n  #Correct value\n  correct_value = 0.0587325677\n  \n  #Result:\n  if(isTRUE(all.equal(correct_value, calculated_value, 1e-7))){\n    print(\"PASSED!\")\n  } else {\n    print(\"FAILED!\")\n  }\n}\n\n\n\nTest__Calc_ValueLast5YearMean__Cod_adult_Model_6_Strat_10_Safegd_LowF_Weakest_stock= function()\n{\n  print(\"Test__Calc_ValueLast5YearMean__Cod_adult_Model_6_Strat_10_Safegd_LowF_Weakest_stock\")\n  \n  #Input\n  GroupName = \"Cod (adult)\"\n  ModelID = 6\n  CatchTrajectories_StartAverageAtTimeStep = 16\n  Path_And_FileName = \"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/R Code/TestFolder_R_Plotting_MSE_Plugin/withBiomassForcing_Yearly_Results HCR type1 and 3/Results/ValueTrajectories/ValueYearly_Cod (adult)_GroupNo14_AllFleets.csv\"\n  GroupFleet_Vars2MeltBy = c(\"GroupName\",\"FleetName\",\"ModelID\",\"StrategyName\",\"ResultType\")\n  \n  #Test:\n  Averages = Calc_Last5YearMean(Path_And_FileName, \"Catches_Last5YearMean\", GroupFleet_Vars2MeltBy, CatchTrajectories_StartAverageAtTimeStep)\n  calculated_value = as.numeric(filter(Averages,ModelID==6 & StrategyName == \"10 Safegd_LowF_Weakest stock\")[4])\n  \n  #Correct value\n  correct_value = 0.1355333742\n\n  \n  #Result:\n  if(isTRUE(all.equal(correct_value, calculated_value, 1e-7))){\n    print(\"PASSED!\")\n  } else {\n    print(\"FAILED!\")\n  }\n}\n\n\n\nTest__Calc_StartBiomass__Cod_adult_Model_6_Strat_10_Safegd_LowF_Weakest_stock= function()\n{\n  print(\"Test__Calc_StartBiomass__Cod_adult_Model_6_Strat_10_Safegd_LowF_Weakest_stock\")\n  \n  #Input\n  GroupName = \"Cod (adult)\"\n  ModelID = 6\n  Biomass_StartTimeStep = 23\n  Path_And_FileName = \"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/R Code/TestFolder_R_Plotting_MSE_Plugin/withBiomassForcing_Yearly_Results HCR type1 and 3/Results/Biomass/BiomassYearly_Cod (adult)_GroupNo14.csv\"\n  GroupsOnly_Vars2MeltBy = c(\"GroupName\",\"ModelID\",\"StrategyName\",\"ResultType\")\n  \n  #Test:\n  BiomassStarts = Get_StartBiomass(Path_And_FileName, \"Biomass_Start\", GroupsOnly_Vars2MeltBy, Biomass_StartTimeStep)\n  calculated_value = as.numeric(filter(BiomassStarts,ModelID==6 & StrategyName == \"10 Safegd_LowF_Weakest stock\")[4])\n  \n  #Correct value\n  correct_value = 0.352146329979102\n  \n  #Result:\n  if(isTRUE(all.equal(correct_value, calculated_value, 1e-7))){\n    print(\"PASSED!\")\n  } else {\n    print(\"FAILED!\")\n  }\n}\n\n\n\n\n# Testing_Helper_Methods --------------------------------------------------\n\n#Load the strategies from uniquestrategies file to save having to load a big file up\nLoad_Strategies = function(path2strats)\n{\n  return(as.matrix(read.csv(FileLocation(path2strats))))\n}\n\nFileLocation = function(branch)\n{\n  ResultsPath = \"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/R Code/TestFolder_R_Plotting_MSE_Plugin/withBiomassForcing_Yearly_Results HCR type1 and 3/Results/\"\n  return(paste(ResultsPath,branch,sep=\"\"))\n}\n\nGetResultsLocation = function()\n{\n  return(\"C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/R Code/TestFolder_R_Plotting_MSE_Plugin/withBiomassForcing_Yearly_Results HCR type1 and 3/Results/\")\n}\n\n# Run Tests ---------------------------------------------------------------\n# Test__Check_Average_Quota_across_models_4_AdultCod_Fleet1_HighestValue()\n# Test__LoadUniqueStrategies__SameUniqueFile()\n# Test__SubsetVectorStrings_ContainingString__Finds_All_Highest_Value()\n# Test__StringContains_AllStrings_StringsDontExist_DoesNotFindThem()\n# Test__StringContains_AllStrings_StringsDoExist_FindsThem()\n# Test__LoadFile_ContainsListStrings()\n# Test__StringContains_StringDoesNotExist()\n# Test__StringContains_StringDoesExist()\n# Test__LoadUniqueGroups__Loads_when_file_exists()\n# Test__LoadUniqueGroups__Creates_from_results.csv_when_doesnt_exist()\nTest__Calc_Biomass_Last5YearMean__Cod_adult_Model_6_Strat_10_Safegd_LowF_Weakest_stock()\nTest__Calc_CatchLast5YearMean__Cod_adult_Model_6_Strat_10_Safegd_LowF_Weakest_stock()\nTest__Calc_ValueLast5YearMean__Cod_adult_Model_6_Strat_10_Safegd_LowF_Weakest_stock()\nTest__Calc_StartBiomass__Cod_adult_Model_6_Strat_10_Safegd_LowF_Weakest_stock()\n",
    "created" : 1483975726958.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1293159462",
    "id" : "3483CA05",
    "lastKnownWriteTime" : 1483977928,
    "last_content_update" : 1483977928948,
    "path" : "C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Tests.R",
    "project_path" : "Tests.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}