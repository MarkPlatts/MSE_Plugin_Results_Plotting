SumBpa=list()   #The number of results that are above Bpa
percBpa=list()  #The percentage of the results above Bpa
percBlim=list() #The percentage of the results above Blim
for (iStrategy in 1:NumberUniqueStrategyNames){
SumBlim[iStrategy]<-list(sum(n[[iStrategy]]$tx1K_km2>=Blim.species))  # percentage of "trials" bigger than Blim
percBlim[iStrategy]<-list((SumBlim[[iStrategy]]*100)/nrow(n[[iStrategy]]))
percBlim[iStrategy]
#percentage of iterations=trials bigger than the Bpa for each harvest control rules strategy
#Harvest Control Rule
SumBpa[iStrategy]<-list(sum(n[[iStrategy]]$tx1K_km2>=Bpa.species))  # percentage of "trials" bigger than Bpa
percBpa[iStrategy]<-list((SumBpa[[iStrategy]]*100)/nrow(n[[iStrategy]]))
percBpa[iStrategy]
}
plotdata$max.axis = scale.axes.hist(n, plotdata$ResultMedian.species, Blim.species, Bpa.species, nbins, NumberUniqueStrategyNames)
#max.axes.2 = scale.axes.hist(n2$tx1K_km2, plotdata$ResultMedian.species, Blim.species, Bpa.species,nbins)
plotdata$max.axis
plotdata$xaxis.label<-c("End Biomass (1000 t)", "Minimum Biomass (1000 t)", "Final Catch (1000 t)", "Total End Value (1000 Euros)")
# generate formated strings from numerical values for ResultMedian, percentages larger than Blim and Bpa and Catch
plotdata$ResultMedian.species.hcr.string = list()
for (iStrategy in 1:NumberUniqueStrategyNames){
plotdata$ResultMedian.species.hcr.string[iStrategy]<-list(format(plotdata$ResultMedian.species[iStrategy,2], digits=3, nsmall=0))
}
#plotdata$ResultMedian.species.hc1.string<-format(plotdata$ResultMedian.species[1,2], digits=3, nsmall=0)
#plotdata$ResultMedian.species.hc2.string<-format(plotdata$ResultMedian.species[2,2], digits=3, nsmall=0)
Larger.than.Blim.hcr.string = list()
Larger.than.Bpa.hcr.string = list()
if (plotdata$result.names[result.index]=="BiomassEnd" || plotdata$result.names[result.index]=="BiomassMin" ||
plotdata$result.names[result.index]=="DiscardMortalities" || plotdata$result.names[result.index]=="DiscardSurvivals" ||
plotdata$result.names[result.index]=="Landings"){ # i.e. 1 or 2
for (iStrategy in 1:NumberUniqueStrategyNames){
Larger.than.Blim.hcr.string[iStrategy]<-format(percBlim[iStrategy], digits=1, nsmall=0)
Larger.than.Bpa.hcr.string[iStrategy]<-format(percBpa[iStrategy], digits=1, nsmall=0)
}
#Larger.than.Blim.hc1.string<-format(percBlim.hc1, digits=1, nsmall=0)
#Larger.than.Blim.hc2.string<-format(percBlim.hc2, digits=1, nsmall=0)
#Larger.than.Bpa.hc1.string<-format(percBpa.hc1, digits=1, nsmall=0)
#Larger.than.Bpa.hc2.string<-format(percBpa.hc2, digits=1, nsmall=0)
}
# do i need the following?
#Catch.string<-format(percBlim.hc1, digits=1, nsmall=0)
# generate the label positions according to ResultMedian, Blim, Bpa and catch quantiles
bmedian.label.xpos=list()
for (iStrategy in 1:NumberUniqueStrategyNames){
bmedian.label.xpos[[iStrategy]]<-c(as.numeric(format(plotdata$ResultMedian.species[iStrategy,2], digits=1, nsmall=0)))
}
bmedian.label.ypos<-c(0.75*as.numeric(plotdata$max.axis$y))
if (plotdata$result.names[result.index]=="BiomassEnd" || plotdata$result.names[result.index]=="BiomassMin" ||
plotdata$result.names[result.index]=="DiscardMortalities" || plotdata$result.names[result.index]=="DiscardSurvivals" ||
#bmedian.label.xpos<-c(as.numeric(format(plotdata$ResultMedian.species[1,2], digits=1, nsmall=0)),as.numeric(format(plotdata$ResultMedian.species[2,2], digits=1, nsmall=0)))
plotdata$result.names[result.index]=="Landings"){ # i.e. 1 or 2
blim.label.xpos<-c(Blim.species)
blim.label.ypos<-c(0.5*as.numeric(plotdata$max.axis$y))
bpa.label.xpos<-c(Bpa.species)
bpa.label.ypos<-c(0.25*as.numeric(plotdata$max.axis$y))
}
lower.quantile.label.xpos<-vector()
upper.quantile.label.xpos<-vector()
for (iStrategy in 1:NumberUniqueStrategyNames){
lower.quantile.label.xpos[iStrategy]<-c(ResultQuantile.species[(5*iStrategy-3),2])
upper.quantile.label.xpos[iStrategy]<-c(ResultQuantile.species[(5*iStrategy-1),2])
}
lower.quantile.label.ypos<-c(0.25*as.numeric(plotdata$max.axis$y))
upper.quantile.label.ypos<-c(0.75*as.numeric(plotdata$max.axis$y))
#lower.quantile.label.xpos<-c(ResultQuantile.species[2,2], ResultQuantile.species[7,2])
#lower.quantile.label.ypos<-c(0.25*as.numeric(plotdata$max.axis$y))
#upper.quantile.label.xpos<-c(ResultQuantile.species[4,2], ResultQuantile.species[9,2])
#upper.quantile.label.ypos<-c(0.75*as.numeric(plotdata$max.axis$y))
# position the 4 percentage labels towards the right along the x-axis and at 65% and 75% along y-axis
larger.than.xpos<-c(rep(as.numeric(plotdata$max.axis$x)*.85,NumberUniqueStrategyNames*2))
larger.than.ypos<-c(as.numeric(plotdata$max.axis$y)*0.60, as.numeric(plotdata$max.axis$y)*0.80)
#larger.than.ypos<-c(as.numeric(plotdata$max.axis$y)*0.65, as.numeric(plotdata$max.axis$y)*0.75, as.numeric(plotdata$max.axis$y)*0.65, as.numeric(plotdata$max.axis$y)*0.75)
# position the catch label towards the right along the x-axis
catch.xpos<-c(plotdata$max.axis$x*0.55)
catch.ypos<-c(plotdata$max.axis$y*4)
if (plotdata$result.names[result.index]=="DiscardMortalities" || plotdata$result.names[result.index]=="DiscardSurvivals" ||
plotdata$result.names[result.index]=="Landings"){
# labels for catch plots#####################change HCR 1 and 2 to the name given
catch.species3.lab = data.frame()
for (iStrategy in 1:NumberUniqueStrategyNames){
catch.species3.lab<- rbind(catch.species3.lab, data.frame(x = catch.xpos, # x = c(rep(270, 2)),
y = catch.ypos, # y = c(0.0075,0.0075),
lab = paste('Median Catch (1991-2007)=', Catch.species,'(*1000 t)'),
Strategy= UniqueStrategyNames[[iStrategy]]))
}
catch.species3.lab$lab <- as.character(catch.species3.lab$lab)    # convert labels to character
}
###############################
if (plotdata$result.names[result.index]=="BiomassEnd" || plotdata$result.names[result.index]=="BiomassMin" ||
plotdata$result.names[result.index]=="DiscardMortalities" || plotdata$result.names[result.index]=="DiscardSurvivals" ||
plotdata$result.names[result.index]=="Landings"){ # i.e. 1 or 2
# labels "% trials larger than Blim/Bpa"
plotdata$blim.species3.lab=data.frame()
plotdata$bpa.species3.lab=data.frame()
plotdata$blim.species5.lab=data.frame()
plotdata$result.names[result.index]
plotdata$result.names[result.index]
plotdata$result.names[result.index]
plotdata$bpa.species5.lab=data.frame()
for (iStrategy in 1:NumberUniqueStrategyNames){
plotdata$blim.species3.lab<- rbind(plotdata$blim.species3.lab, data.frame(x = larger.than.xpos[iStrategy*2-1], # c(rep(1000, 4)),
y = larger.than.ypos[1], # c(0.0015, 0.0010,0.0015,0.0010),
lab = paste(Larger.than.Blim.hcr.string[[iStrategy]],'% trials > Blim'),
Strategy= UniqueStrategyNames[[iStrategy]]))
plotdata$bpa.species3.lab<- rbind(plotdata$bpa.species3.lab, data.frame(x = larger.than.xpos[iStrategy*2], # c(rep(1000, 4)),
y = larger.than.ypos[2], # c(0.0015, 0.0010,0.0015,0.0010),
lab = paste(Larger.than.Bpa.hcr.string[[iStrategy]],'% trials > Bpa'),
Strategy= UniqueStrategyNames[[iStrategy]]))
plotdata$blim.species5.lab <- rbind(plotdata$blim.species5.lab, data.frame(x= blim.label.xpos, y = blim.label.ypos, lab='Blim', Strategy=UniqueStrategyNames[[iStrategy]]))
plotdata$bpa.species5.lab <- rbind(plotdata$bpa.species5.lab, data.frame(x= bpa.label.xpos, y = bpa.label.ypos, lab='Bpa', Strategy=UniqueStrategyNames[[iStrategy]]))
#plotdata$blim.species5.lab[[iStrategy]]<- data.frame(x= c(blim.label.xpos, bpa.label.xpos), y = c(blim.label.ypos, bpa.label.ypos), lab=c('Blim', 'Bpa'), Strategy=UniqueStrategyNames[[iStrategy]] )
#plotdata$blim.species5.lab[[iStrategy]]$lab <- as.character(b.species5.lab[[iStrategy]]$lab)
}
plotdata$blim.species3.lab$lab <- as.character(plotdata$blim.species3.lab$lab)    # convert labels to character
plotdata$bpa.species3.lab$lab <- as.character(plotdata$bpa.species3.lab$lab)
plotdata$blim.species5.lab$lab <- as.character(plotdata$blim.species5.lab$lab)
plotdata$bpa.species5.lab$lab <- as.character(plotdata$bpa.species5.lab$lab)
#b.species3.lab[iStrategy]<- data.frame(x = c(larger.than.xpos[iStrategy*2-1],larger.than.xpos[iStrategy*2]), # c(rep(1000, 4)),
#                 y = larger.than.ypos, # c(0.0015, 0.0010,0.0015,0.0010),
#                 lab = c(paste(Larger.than.Blim.hcr.string,'% trials > Blim'), paste(Larger.than.Bpa.hcr.string,'% trials > Bpa'), paste(Larger.than.Blim.hc2.string,'% trials > Blim'), paste(Larger.than.Bpa.hc2.string,'% trials > Bpa')),
#                 Strategy= c(StrategyNames[1], StrategyNames[1], StrategyNames[2], StrategyNames[2]))
#b.species3.lab$lab <- as.character(b.species3.lab$lab)    # convert labels to character
# labels for Blim and Bpa lines
#b.species5.lab<- data.frame(x= c(blim.label.xpos, bpa.label.xpos), y = c(blim.label.ypos, bpa.label.ypos), lab=c('Blim', 'Bpa'), Strategy=UniqueStrategyNames[[iStrategy]] )
#b.species5.lab$lab <- as.character(b.species5.lab$lab)    # convert labels to character
}
plotdata$b.species4.lab=data.frame()
c.species4.lab=data.frame()
c.species5.lab=data.frame()
c.species6.lab=data.frame()
for (iStrategy in 1:NumberUniqueStrategyNames){
plotdata$b.species4.lab <- rbind(plotdata$b.species4.lab, data.frame(x=bmedian.label.xpos[[iStrategy]], y=bmedian.label.ypos, lab='B median', Strategy=UniqueStrategyNames[[iStrategy]]))
c.species4.lab <- rbind(c.species4.lab, data.frame(x=bmedian.label.xpos[[iStrategy]], y=bmedian.label.ypos, lab='Median', Strategy= UniqueStrategyNames[[iStrategy]]))
c.species5.lab <- rbind(c.species5.lab,data.frame(x=lower.quantile.label.xpos[[iStrategy]], y = lower.quantile.label.ypos, lab=c('LQ'), Strategy= UniqueStrategyNames[[iStrategy]]))
}
c.species6.lab <- rbind(c.species6.lab, data.frame(x=upper.quantile.label.xpos[[iStrategy]], y = upper.quantile.label.ypos, lab=c('UQ'), Strategy= UniqueStrategyNames[[iStrategy]]))
plotdata$b.species4.lab$lab <- as.character(plotdata$b.species4.lab$lab)    # convert labels to character
c.species4.lab$lab <- as.character(c.species4.lab$lab)    # convert labels to character
c.species5.lab$lab <- as.character(c.species5.lab$lab)    # convert labels to character
c.species6.lab$lab <- as.character(c.species6.lab$lab)    # convert labels to character
if (plotdata$result.names[result.index]=="BiomassEnd" || plotdata$result.names[result.index]=="BiomassMin" ||
plotdata$result.names[result.index]=="DiscardMortalities" || plotdata$result.names[result.index]=="DiscardSurvivals" ||
plotdata$result.names[result.index]=="Landings"){ # i.e. 1 or 2
plotdata$blim.bpa.xaxis<-data.frame(blim.axis=Blim.species, bpa.axis=Bpa.species)	# we seem to need the position of the
# blim and bpa lines as a data.frame to plot them in the same way as we plot the medan line.
}
quantile.xaxis=data.frame()
for (iStrategy in 1:length(UniqueStrategyNames)){
quantile.xaxis<-rbind(quantile.xaxis,data.frame(Strategy=UniqueStrategyNames[iStrategy], lq.axis=ResultQuantile.species[5*iStrategy-3,2], uq.axis=ResultQuantile.species[5*iStrategy-1,2]))
}
plotdata$results.species = Add_Reg(plotdata$results.species)
plotdata$blim.species3.lab = Add_Reg(plotdata$blim.species3.lab)
plotdata$bpa.species3.lab = Add_Reg(plotdata$bpa.species3.lab)
plotdata$ResultMedian.species = Add_Reg(plotdata$ResultMedian.species)
plotdata$blim.bpa.xaxis = Add_Reg(plotdata$blim.bpa.xaxis)
plotdata$b.species4.lab = Add_Reg(plotdata$b.species4.lab)
plotdata$bpa.species5.lab = Add_Reg(plotdata$bpa.species5.lab)
plotdata$blim.species5.lab = Add_Reg(plotdata$blim.species5.lab)
head(plotdata$result.names[result.index])
head(plotdata$results.species)
plotdata$blim.species3.lab$Regulation = factor(plotdata$blim.species3.lab$Regulation, levels = c("Weakest stock", "Selective", "Highest value", "Other"))
OrderedStrategies = as.vector(plotdata$blim.species3.lab[order(plotdata$blim.species3.lab$Regulation),]$Strategy)
plotdata$results.species <- within(plotdata$results.species, Strategy <- factor(Strategy, levels= OrderedStrategies))
B_SPECIES = use_GGPLOT(plotdata, variable_to_plot = "tx1K_km2", fill_with_variable = "Regulation")
B_SPECIES = use_GGPLOT(plotdata, variable_to_plot = "tx1K_km2", fill_with_variable = "Regulation")
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions.r')
B_SPECIES = use_GGPLOT(plotdata, variable_to_plot = "tx1K_km2", fill_with_variable = "Regulation")
head(plotdata$results.species)
head(plotdata$results.species[Strategy=="T3_20 MgtPlan_yes discard_Highest value",])
unique(plotdata$results.species$Strategy)
head(plotdata$results.species[Strategy=="T3_20 MgtPlan_yes discard_Highest value"])
head(plotdata$results.species[Strategy=="T3_20 MgtPlan_yes discard_Highest value",])
str(plotdata$results.specie)
str(plotdata$results.species)
head(plotdata$results.species[Strategy=="T3_20 MgtPlan_yes discard_Highest value",])
head(plotdata$results.species[,Strategy=="T3_20 MgtPlan_yes discard_Highest value"])
head(plotdata$results.species[plotdata$results.species$Strategy=="T3_20 MgtPlan_yes discard_Highest value",])
plotdata$results.species[plotdata$results.species$Strategy=="T3_20 MgtPlan_yes discard_Highest value",]
a = plotdata$results.species[plotdata$results.species$Strategy=="T3_20 MgtPlan_yes discard_Highest value",]
str(a)
a$tx1K_km2
hist(a$tx1K_km2)
hist(a$tx1K_km2, breaks=30)
head(a)
hist(a$tx1K_km2, breaks=20)
qplot(a$tx1K_km2, breaks=20)
qplot(tx1K_km2, data=a)
qplot(tx1K_km2, data=a, bins=20)
qplot(tx1K_km2, data=a, bins=10)
ggsave(B_SPECIES, file=paste(output_folder, plotdata$species_in_resultsfile[species.index[1]],"_",plotdata$result.names[result.index],".png", sep=""), width=6, height=length(UniqueStrategyNames)*1.5, limitsize = FALSE)
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
variable_to_plot
fill_with_variable
nbins
a = plotdata$results.species[plotdata$results.species$Strategy="T3_20 MgtPlan_yes discard_Highest value",]
a = plotdata$results.species[plotdata$results.species$Strategy=="T3_20 MgtPlan_yes discard_Highest value",]
head(a)
B_SPECIES = ggplot(a,aes(x=get(variable_to_plot), fill=get(fill_with_variable)))
B_SPECIES = B_SPECIES + geom_histogram(binwidth = (plotdata$max.axis$x)/nbins, aes(y=..density..))
B_SPECIES = B_SPECIES + facet_wrap(~Strategy, ncol=1)
B_SPECIES = B_SPECIES + ylab("Density") + xlab(plotdata$xaxis.label[result.index]) #xlab("Minimum Biomass (1000 t)")
B_SPECIES = B_SPECIES + labs(title=paste(plotdata$species_in_resultsfile[species.index[1]], "\n", plotdata$result.names[result.index], sep=""))
B_SPECIES = B_SPECIES + theme(strip.text = element_text(size=6), panel.background = element_blank(), panel.grid.major=element_blank(), panel.grid.minor=element_blank(),axis.line=element_line(colour="Black"), axis.text=element_text(colour="Black", size=6))
if(plotdata$result.names[result.index] =="BiomassEnd" || plotdata$result.names[result.index]=="BiomassMin"){
B_SPECIES = B_SPECIES + geom_text(data = plotdata$blim.species3.lab, aes(x = x, y = y, label = lab), size = 2)
B_SPECIES = B_SPECIES + geom_text(data = plotdata$bpa.species3.lab, aes(x = x, y = y, label = lab), size = 2)
B_SPECIES = B_SPECIES + geom_vline(data=plotdata$blim.bpa.xaxis, aes(xintercept=blim.axis),linetype="dotdash", size=0.15)
B_SPECIES = B_SPECIES + geom_vline(data=plotdata$blim.bpa.xaxis, aes(xintercept=bpa.axis),linetype="longdash", size=0.15)
B_SPECIES = B_SPECIES + geom_text(data = plotdata$bpa.species5.lab, aes(x = x, y = y, label = lab), size = 2, angle=90, vjust=-0.5)
B_SPECIES = B_SPECIES + geom_text(data = plotdata$blim.species5.lab, aes(x = x, y = y, label = lab), size = 2, angle=90, vjust=-0.5)
}
B_SPECIES = B_SPECIES + coord_cartesian(ylim = c(0, as.numeric(plotdata$max.axis$y)*1.1), xlim = c(0, as.numeric(plotdata$max.axis$x)))
# median, Blim and Bpa lines and labels
B_SPECIES = B_SPECIES + geom_vline(data=plotdata$ResultMedian.species, aes(xintercept=median.species),linetype="dotted", size=0.15)
B_SPECIES = B_SPECIES + geom_text(data = plotdata$b.species4.lab, aes(x = x, y = y, label = lab), size = 2, angle=90, vjust=-0.5)
if(plotdata$result.names[result.index]=="DiscardMortalities" || plotdata$result.names[result.index]=="DiscardSurvivals" || plotdata$result.names[result.index]=="Landings"){
geom_text(data = plotdata$c.species4.lab, aes(x = x, y = y, label = lab), size = 2, angle=90, vjust=-0.5)+
geom_text(data = plotdata$c.species5.lab, aes(x = x, y = y, label = lab), size = 2, angle=90, vjust=-0.5)+
geom_text(data = plotdata$c.species6.lab, aes(x = x, y = y, label = lab), size = 2, angle=90, vjust=-0.5)
}
return(B_SPECIES)
head(a)
B_SPECIES = ggplot(a,aes(x=get(variable_to_plot), fill=get(fill_with_variable)))
B_SPECIES = B_SPECIES + geom_histogram(binwidth = (plotdata$max.axis$x)/nbins, aes(y=..density..))
B_SPECIES = B_SPECIES + facet_wrap(~Strategy, ncol=1)
B_SPECIES = B_SPECIES + ylab("Density") + xlab(plotdata$xaxis.label[result.index]) #xlab("Minimum Biomass (1000 t)")
B_SPECIES = B_SPECIES + labs(title=paste(plotdata$species_in_resultsfile[species.index[1]], "\n", plotdata$result.names[result.index], sep=""))
B_SPECIES = B_SPECIES + theme(strip.text = element_text(size=6), panel.background = element_blank(), panel.grid.major=element_blank(), panel.grid.minor=element_blank(),axis.line=element_line(colour="Black"), axis.text=element_text(colour="Black", size=6))
if(plotdata$result.names[result.index] =="BiomassEnd" || plotdata$result.names[result.index]=="BiomassMin"){
B_SPECIES = B_SPECIES + geom_text(data = plotdata$blim.species3.lab, aes(x = x, y = y, label = lab), size = 2)
B_SPECIES = B_SPECIES + geom_text(data = plotdata$bpa.species3.lab, aes(x = x, y = y, label = lab), size = 2)
B_SPECIES = B_SPECIES + geom_vline(data=plotdata$blim.bpa.xaxis, aes(xintercept=blim.axis),linetype="dotdash", size=0.15)
B_SPECIES = B_SPECIES + geom_vline(data=plotdata$blim.bpa.xaxis, aes(xintercept=bpa.axis),linetype="longdash", size=0.15)
B_SPECIES = B_SPECIES + geom_text(data = plotdata$bpa.species5.lab, aes(x = x, y = y, label = lab), size = 2, angle=90, vjust=-0.5)
B_SPECIES = B_SPECIES + geom_text(data = plotdata$blim.species5.lab, aes(x = x, y = y, label = lab), size = 2, angle=90, vjust=-0.5)
}
B_SPECIES = B_SPECIES + coord_cartesian(ylim = c(0, as.numeric(plotdata$max.axis$y)*1.1), xlim = c(0, as.numeric(plotdata$max.axis$x)))
# median, Blim and Bpa lines and labels
B_SPECIES = B_SPECIES + geom_vline(data=plotdata$ResultMedian.species, aes(xintercept=median.species),linetype="dotted", size=0.15)
B_SPECIES = B_SPECIES + geom_text(data = plotdata$b.species4.lab, aes(x = x, y = y, label = lab), size = 2, angle=90, vjust=-0.5)
if(plotdata$result.names[result.index]=="DiscardMortalities" || plotdata$result.names[result.index]=="DiscardSurvivals" || plotdata$result.names[result.index]=="Landings"){
geom_text(data = plotdata$c.species4.lab, aes(x = x, y = y, label = lab), size = 2, angle=90, vjust=-0.5)+
geom_text(data = plotdata$c.species5.lab, aes(x = x, y = y, label = lab), size = 2, angle=90, vjust=-0.5)+
geom_text(data = plotdata$c.species6.lab, aes(x = x, y = y, label = lab), size = 2, angle=90, vjust=-0.5)
}
return(B_SPECIES)
}
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
plotdata$results.species[plotdata$results.species$Strategy=="T3_20 MgtPlan_yes discard_Highest value",]
plotdata$results.species[plotdata$results.species$Strategy=="T3_20 MgtPlan_yes discard_Highest value",]
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
nbins
typeof(nbins)
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
number_bins
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
rm(list=ls())
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
#use data.table because it is more efficient and good practice for big data objects
library(data.table)
library(reshape2)
#Load the data
realised_fs = fread("C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1 and 3_141216/Results/RealisedF/RealisedTotalFs_Cod (adult)_GroupNo14.csv")
colnames(realised_fs) = as.character(realised_fs[1,])
realised_fs = realised_fs[-1,]
#melt the columns into a better format for analysis etc
vals = melt(realised_fs, id.vars = colnames(realised_fs)[1:4])
colnames(vals)[5:6] = c("TimeStep", "Realised_F")
summary(a)
realised_fs = fread("C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1 and 3_141216/Results/RealisedF/RealisedTotalFs_Cod (adult)_GroupNo14.csv")
colnames(realised_fs) = as.character(realised_fs[1,])
realised_fs = fread("C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1 and 3_141216/Results/RealisedF/RealisedTotalFs_Cod (adult)_GroupNo14.csv")
rm(list=ls())
library(data.table)
library(reshape2)
#Load the data
realised_fs = fread("C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1 and 3_141216/Results/RealisedF/RealisedTotalFs_Cod (adult)_GroupNo14.csv")
install.packages("data.table")
library(data.table)
library(reshape2)
#Load the data
realised_fs = fread("C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1 and 3_141216/Results/RealisedF/RealisedTotalFs_Cod (adult)_GroupNo14.csv")
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1 and 3_141216/
library(data.table)
library(reshape2)
#Load the data
realised_fs = fread("C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1 and 3_141216/Results/RealisedF/RealisedTotalFs_Cod (adult)_GroupNo14.csv")
?fread
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
head(realised_fs)
fread("C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1 and 3_141216/Results/RealisedF/RealisedTotalFs_Cod (adult)_GroupNo14.csv", skip = 7)
realised_fs = fread("C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1 and 3_141216/Results/RealisedF/RealisedTotalFs_Cod (adult)_GroupNo14.csv", skip = 7)
realised_fs = fread("C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1 and 3_141216/Results/RealisedF/RealisedTotalFs_Cod (adult)_GroupNo14.csv")
realised_fs = fread("C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1 and 3_141216/Results/RealisedF/Realised.csv")
head(realised_fs)
realised_fs = fread("C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1 and 3_141216/Results/RealisedF/RealisedTotalFsYearly_Cod (adult).csv")
realised_fs = fread("C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1 and 3_141216/Results/RealisedF/RealisedTotalFsYearly_Cod (adult)_.csv")
realised_fs = fread("C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1 and 3_141216/Results/RealisedF/RealisedTotalFsYearly_Cod (adult)_Group.csv")
realised_fs = fread("C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1 and 3_141216/Results/RealisedF/RealisedTotalFsYearly_Cod (adult)_GroupNo14")
realised_fs = fread("C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1 and 3_141216/Results/RealisedF/RealisedTotalFsYearly_Cod (adult)_GroupNo.csv")
realised_fs = fread("C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1 and 3_141216/Results/RealisedF/RealisedTotalFsYearly_Cod (adult)_GroupNo1.csv")
realised_fs = fread("C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1 and 3_141216/Results/RealisedF/RealisedTotalFsYearly_Cod (adult)_GroupNo14.csv")
colnames(realised_fs) = as.character(realised_fs[1,])
realised_fs = realised_fs[-1,]
#melt the columns into a better format for analysis etc
vals = melt(realised_fs, id.vars = colnames(realised_fs)[1:4])
colnames(vals)[5:6] = c("TimeStep", "Realised_F")
a=subset(vals, TimeStep=="60" & StrategyName =="10 NSMAP 2020_LowF_Weakest stock")
str(vals)
head(a)
vals$TimeStep = as.numeric(vals$TimeStep)
str(vals)
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
qplot(data=vals, Realised_F, facet_wrap(~Strategy, ncol=1))
library(ggplot2)
qplot(data=vals, Realised_F, facet_wrap(~Strategy, ncol=1))
qplot(data=vals, Realised_F, facets=.~Strategy)
qplot(data=vals, Realised_F, facets=Strategy~.)
str(vals)
qplot(data=vals, Realised_F, facets=.~Strategy)
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
qplot(data=vals, Realised_F, facets=.~StrategyName)
qplot(data=vals, Realised_F, facets=StrategyName~.)
qplot(data=vals, vals$Realised_F, geom=hist, facets=~StrategyName, aes(y=..density..))
qplot(data=vals, vals$Realised_F, geom="histogram", facets=~StrategyName, aes(y=..density..))
qplot(data=vals, vals$Realised_F, geom="histogram", facets=~StrategyName)
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
?qplot
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
max(vals$Realised_F)
vals[vals$Realised_F>10]
vals[vals$Realised_F>8]
vals[vals$Realised_F>3]
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/PlotEndDistributions_RealisedFs.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
FileData
ResultsPath
c(Group, Fleet)
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
paste(Path,"/AVERAGE_REGS/",iFleet,".png",sep="")
Path
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Calc_average_quota_per_fleet_group_regulation.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
paste(Path,"/../AVERAGE_REGS/",iFleet,".png",sep="")
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
iFleet
paste(Path,"/../AVERAGE_REGS/",iFleet,".png",sep="")
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
Strategies_OfRegType
RegulationType
FileData
FileData
FileData
head(FileData)
head(FileData)
filter(FileData, StrategyName %in% Strategies_OfRegType)
head(filter(FileData, StrategyName %in% Strategies_OfRegType))
head(FileData)
as.numeric(colMeans(FileData[,6:ncol(FileData)]))
FileData$X1
as.numeric(colMeans(FileData[,6:ncol(FileData)]))
as.numeric(colMeans(FileData[,6:ncol(FileData)]))
head(FileData)
mean(FileData$X1)
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/initialisation.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
head(results)
params$strats
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/F_Trajectories.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
TimeStepVals
MEANS[,i]
MEANS
i
MEANS[,i]
i
str(MEANS)
MEANS[,2]
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
head(groupdat[groupdat$Strategy %in% STRAT,6:ncol(groupdat)])
groupdat[groupdat$Strategy %in% STRAT,6:ncol(groupdat)]
groupdat[groupdat$Strategy %in% STRAT,6:ncol(groupdat)]
groupdat[groupdat$Strategy %in% STRAT,6:ncol(groupdat)]!=-9999
sum(groupdat[groupdat$Strategy %in% STRAT,6:ncol(groupdat)]!=-9999)
sum(groupdat[groupdat$Strategy %in% STRAT,6:ncol(groupdat)]==-9999)
sum(groupdat[groupdat$Strategy %in% STRAT,6:ncol(groupdat)]!Q=-9999)
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
paste(params$plot.path,folder.to.save.plot, "/", FILENAME,"_.png",sep="")
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
str(df_Average_Quota)
df_Average_Quota[df_Average_Quota$AverageQuota<0,]
iFleet
data.frame(Hello, Goodbye)
data.frame("Hello", "Goodbye")
data.frame("Hello"=1, "Goodbye"=2)
?data.frame
data.frame("Hello"=NULL, "Goodbye"=NULL)
a=data.frame("Hello"=NULL, "Goodbye"=NULL)
b = rbind(a, data.frame("Hello"=1, "Goodbye"=2))
b
?write.csv
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
params = initialise_params()
create.plot.dirs(params)
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plot_tools.R')
create.plot.dirs(params)
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
percBlim[iStrategy]
100 - percBlim[iStrategy]
perc.below.Blim
100 - percBlim[[iStrategy]]
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
paste(output_csv_folder, "Blim.csv", sep="")
head(df.perc.Blim)
df.perc.Blim
write.csv(df.perc.Blim, file=paste(output_csv_folder, "Blim.csv", sep=""))
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plot_tools.R')
create.plot.dirs(params)
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
traceback()
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
plotdata$results.species
head(plotdata$results.species)
Strategy
library(plyr)
ddply(plotdata$results.species, .(Strategy), summarise, median.species=median(tx1K_km2))
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
ddply(plotdata$results.species, .(Strategy), summarise, median.species=median(tx1K_km2))
ddply(plotdata$results.species, .(Strategy), summarise, median.species=median(tx1K_km2))
plotdata$ResultMedian.species
ResultQuantile.species
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
ddply(plotdata$results.species, .(Strategy), summarise, median.species=median(tx1K_km2))
plotdata$ResultMedian.species<-ddply(plotdata$results.species, .(Strategy), summarise, median.species=median(tx1K_km2))
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
plotdata$ResultMedian.species
str(plotdata$results.species)
tail(plotdata$results.species)
head(plotdata$results.species)
head(ddply(plotdata$results.species, .(Strategy), summarise, median.species=median(tx1K_km2)))
tail(ddply(plotdata$results.species, .(Strategy), summarise, median.species=median(tx1K_km2)))
str(plotdata$results.species)
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
ddply
head(plotdata$results.species)
Strategy
ddply(plotdata$results.species, .(Strategy), summarise, median.species=median(tx1K_km2))
plotdata$ResultMedian.species<-ddply(plotdata$results.species, .(Strategy), summarise, median.species=median(tx1K_km2))
plotdata$ResultMedian.species
ddply(plotdata$results.species, .(Strategy), summarise, quantile.species=quantile(tx1K_km2))
?quantile
?do.call
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
source('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
debugSource('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
#write.table(df.perc.Bpa, file=paste(output_csv_folder, "Bpa.csv", sep=""), sep=",", append = T)
debugSource('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
parent.frame(2)$ofile
debugSource('C:/Users/Mark/Desktop/MSE_Plugin_Results_Plotting/Run_DistributionPlots.R')
sys.frame(1)$ofile
install.packages(c("data.table", "digest", "ggplot2", "Rcpp", "stringr"))
install.packages(c("data.table", "digest", "ggplot2", "Rcpp",
"stringr"))
install.packages(c("data.table", "digest", "ggplot2", "Rcpp",
