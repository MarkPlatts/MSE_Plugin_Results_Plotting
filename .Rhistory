Choke
source('~/.active-rstudio-document')
qplot(x = Quota, y = Landings, data = merged, color = ModeChoke, alpha = I(0.1))
qplot(x = Quota, y = Landings, data = merged[ModeChoke == "Other"], color = ModeChoke, alpha = I(0.1))
qplot(x = Quota, y = Landings, data = merged, color = ModeChoke, alpha = I(0.1), facets = ModeChoke~.)
qplot(x = Quota, y = Landings, data = merged, color = ModeChoke, alpha = I(0.05), facets = ModeChoke~.)
qplot(x = Quota, y = Landings, data = merged, color = ModeChoke, alpha = I(0.1), facets = ModeChoke~.)
qplot(x = Quota, y = Landings, data = merged, color = "blue", alpha = I(0.1), facets = ModeChoke~.)
qplot(x = Quota, y = Landings, data = merged, color = blue, alpha = I(0.1), facets = ModeChoke~.)
qplot(x = Quota, y = Landings, data = merged, alpha = I(0.1), facets = ModeChoke~.)
qplot(x = Quota, y = Landings, data = merged, colour = "red", alpha = I(0.1), facets = ModeChoke~.)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
print(a)
merged
print(merged)
Quota
Landings
Choke
merged <- merge(Quota, Landings)
merged
merge(merged, Choke)
merged
Choke
Landings <- fread(paste("C:/Users/Mark/Dropbox/GAP2_MSE Plugin2/North Sea MultiAnnual Plan/ResultsType1-4_220117/Results/LandingsTrajectories/LandingsYearly_Cod (adult)_GroupNo14_", iFleet, ".csv", sep=""),
header = T)
Landings
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
LETTERS
[4:6]
LETTERS[4:6]
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
head(dt.choke)
dt[, col.data.starts:ncol(dt)]
sum(data.only!=val.to.check)
data.only
val.to.check
data.only!=val.to.check
anyNA(data.only)
allna(data.only)
is.na(data.only)
all(is.na(data.only))
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
dt.landings
iGroup
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
if(TRUE) print("Hello"); print("Goodbye")
if(FALSE) print("Hello"); print("Goodbye")
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
matrix(
c(2, 4, 3, 1, 5, 7),
nrow=3,
ncol=2)
matrix(
c(2, 4, 3, 1, 5, 7),
ncol=2, nrow =2)
matrix(
c(2, 4, 3, 1, 5, 7),
ncol=2, nrow =3)
matrix(
c(2, 4, 3, 1, 5, 7),
ncol=2, nrow =3, byrow = T)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
path.landings
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
c(str_c("FleetNO", 1:11), "AllFleets")
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/share_tools.R')
isNotAll = function(dt, col.data.starts, val.to.check)
#count how many values aren't NA and if there is at least one then return that file is valid
{
data.only = dt[, col.data.starts:ncol(dt)]
file.valid = FALSE
if(sum(data.only!=val.to.check)>0) {file.valid = TRUE}
return (file.valid)
}
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/share_tools.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
dt.choke
dt.choke
dt.landings
dt.landings
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
dt
dt
dt
val.name
dt
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
dt.choke
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
melt(data = dt, id.vars = 1:ncol.before.timesteps, variable.name = "TimeStep", value.name = val.name)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
merge(dt.landings, dt.quota)
dt.landings
dt.quota
dt.landings
dt.quota
merge(dt.landings, dt.quota)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
dt.choke
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
ncol.before.timesteps
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
dt.choke
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
ncol.before.timesteps
dt
merge(dt, dt.choke, by = c("FleetName", "ModelID", "StrategyName"))
?merge
dt.choke
merge(dt, dt.choke, by = c("FleetName", "ModelID", "StrategyName", "TimeStep"))
dt.choke
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(dt.choke[,choke_group])
dt.choke[, .N, by = choke_group]
dt.choke[choke_group != NA, .N, by = choke_group]
dt.choke[!is.na(choke_group), .N, by = choke_group]
round(13/12)
round(11/12)
floor(11/12)
floor(12/12)
floor(13/12)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
dt.choke
dt.choke[, TimeStep = (1 + floor(TimeStep/12))]
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
dt.choke
dt.choke[, TimeStep = (1 + floor(TimeStep/12))]
dt.choke[, TimeStep]
dt.choke[, TimeStep]/12
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
dt.choke
glimpse(dt.choke)
dt.choke[, TimeStep]
dt.choke[, TimeStep]/12
1 + floor(dt.choke[, TimeStep]/12)
unique(1 + floor(dt.choke[, TimeStep]/12))
unique(1 + floor((dt.choke[, TimeStep]-1)/12))
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
dt.choke
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
dt.choke
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
dt.choke
unique(dt.choke$choke)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
dt.choke
dt.choke[ModelID == 1 & StrategyName == "1 CFP_2015 TargetF_Weakest stock"]
unique(dt.choke[ModelID == 1 & StrategyName == "1 CFP_2015 TargetF_Weakest stock"])
unique(dt.choke)
dt.choke
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
glimpse(dt.choke)
glimpse(dt.landings)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
dt
unique(dt$StrategyName)
dt[, landings.minus.quota.modified := landings.minus.quota * (GroupName!=choke)]
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
write.path
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
print
apply
?print
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_landings-quota_file.R')
dt.choke
summary(dt.choke)
dt
setwd("C:/Users/Mark/Dropbox/Personal/Learning/R Creating Packages/cats")
install.packages(cats)
install.packages("cats")
setwd("..")
install.packages("cats")
install("cats")
library("devtools")
install("cats")
?cat_function
library(cats)
?cat_function
cat_function
getwd()
dir()
set("cats")
setwd("cats")
document()
setwd("..")
install("cats")
?cat_function
document()
setwd("..")
document()
dir
dir()
setwd("R creating Packages/cats")
dir()
document()
setwd("..")
install("cats")
?cat_function
?cat_function
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_all_tables.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_all_tables.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_all_tables.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
rm(list=ls())
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/initialisation_baltic.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
?arima.sim
arima.sim(n = 10, list(order = c(0,0,0)))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(appendVariableToDataTable)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R')
rm(list=ls())
dt_mod
library(data.table)
library(stringr)
library(ggplot2)
source("C:/Users/Mark/Dropbox/RodentDataAnalytics-Bees Experiment/Australia Experiment/Data/Cluster_Analysis/helper_functions.R")
library(data.table)
library(stringr)
library(ggplot2)
source("C:/Users/Mark/Dropbox/RodentDataAnalytics-Bees Experiment/Australia Experiment/Data/Cluster_Analysis/helper_functions.R")
dt <- fread("C:/Users/Mark/Dropbox/RodentDataAnalytics-Bees Experiment/Australia Experiment/Data/Output_features/segment_features.csv",
stringsAsFactors = TRUE)
print(any(is.na(dt)))
dt_xy <- fread("C:/Users/Mark/Dropbox/RodentDataAnalytics-Bees Experiment/Australia Experiment/Data/Output_features/segment_xys.csv", head = TRUE)
summary(dt)
hist(dt$InnerRadiusVariation)
summary(dt[, .(MinRotation, MaxRotation, MaxAbsRotation)])
hist(dt$SumAbsoluteAngles, breaks = 50)
dt[SumAbsoluteAngles>4000, .N]
dt[SumAbsoluteAngles>6000, .N]
dt[SumAbsoluteAngles>8000, .N]
head(dt_mod)
dt_names <- names(dt)
speed_names <- str_subset(dt_names, "Speed")
dt_mod <- dt[, (speed_names) := NULL]
summary(dt_mod)
head(dt_mod)
names(dt_mod)
features = names(dt_mod)[-1:4]
names(dt_mod)[-1:4]
names(dt_mod)[, -1:4]
names(dt_mod)[-(1:4)]
a <- names(dt_mod)[-(1:4)]
a
str_detect(a, "Rotation")
!str_detect(a, "Rotation")
str_detect(a, !"Rotation")
a[!str_detect(a, "Rotation")]
set.seed(1) #the following code take a random sample of the segments
features_only <- names(dt_mod)[-(1:4)]
features_no_rotation <- features_only[!str_detect(features_only, "Rotation")]
dt_no_rotate <- dt_mod[, (features_no_rotation) := NULL]
km.out <- kmeans(x = scale(dt_no_rotate[, MedianDistanceFromCentre:SumAbsoluteAngles]), centers = 6, nstart = 20)
features_no_rotation
set.seed(1) #the following code take a random sample of the segments
features_only <- names(dt_mod)[-(1:4)]
rotation_features <- features_only[str_detect(features_only, "Rotation")]
dt_no_rotate <- dt_mod[, (rotation_features) := NULL]
set.seed(1) #the following code take a random sample of the segments
features_only <- names(dt_mod)[-(1:4)]
rotation_features <- str_subset(features_only, "Rotation")
dt_no_rotate <- dt_mod[, (rotation_features) := NULL]
names(dt_no_rotate)
rotation_features
features_only
head(dt_mod)
dt_names <- names(dt)
speed_names <- str_subset(dt_names, "Speed")
dt_mod <- dt[, (speed_names) := NULL]
summary(dt_mod)
dt_mod
head(dt_mod)
head(dt)
dt <- fread("C:/Users/Mark/Dropbox/RodentDataAnalytics-Bees Experiment/Australia Experiment/Data/Output_features/segment_features.csv",
stringsAsFactors = TRUE)
print(any(is.na(dt)))
dt_xy <- fread("C:/Users/Mark/Dropbox/RodentDataAnalytics-Bees Experiment/Australia Experiment/Data/Output_features/segment_xys.csv", head = TRUE)
dt_names <- names(dt)
speed_names <- str_subset(dt_names, "Speed")
dt_mod <- dt[, (speed_names) := NULL]
summary(dt_mod)
features_only <- names(dt_mod)[-(1:4)]
featuers_only
features_only
str_subset(features_only, "Rotation")
rotation_features <- str_subset(features_only, "Rotation")
dt_no_rotate <- dt_mod[, (rotation_features) := NULL]
dt_mod
dt_no_rotate <- dt_mod
dt_no_rotate[, (rotation_features) := NULL]
dt_no_rotate
rotation_features
dt_no_rotate <- dt_no_rotate[, !(rotation_features)]
rotation_features
dt_no_rotate <- dt_no_rotate[, !(rotation_features), with = F]
dt_no_rotate
set.seed(1) #the following code take a random sample of the segments
features_only <- names(dt_mod)[-(1:4)]
rotation_features <- str_subset(features_only, "Rotation")
dt_no_rotate
dt_no_rotate <- dt_no_rotate[, !(rotation_features), with = F]
km.out <- kmeans(x = scale(dt_no_rotate[, MedianDistanceFromCentre:SumAbsoluteAngles]), centers = 6, nstart = 20)
dt_no_rotate[, cluster := km.out$cluster]
plot_cluster(features = dt_no_rotate, xy = dt_xy, nSegments = 5)
set.seed(1) #the following code take a random sample of the segments
features_only <- names(dt_mod)[-(1:4)]
rotation_features <- str_subset(features_only, "Rotation")
dt_no_rotate <- dt_no_rotate[, !(rotation_features), with = F]
km.out <- kmeans(x = scale(dt_no_rotate[, MedianDistanceFromCentre:SumAbsoluteAngles]), centers = 3, nstart = 20)
dt_no_rotate[, cluster := km.out$cluster]
plot_cluster(features = dt_no_rotate, xy = dt_xy, nSegments = 5)
set.seed(1) #the following code take a random sample of the segments
features_only <- names(dt_mod)[-(1:4)]
rotation_features <- str_subset(features_only, "Rotation")
dt_no_rotate <- dt_no_rotate[, !(rotation_features), with = F]
km.out <- kmeans(x = scale(dt_no_rotate[, MedianDistanceFromCentre:SumAbsoluteAngles]), centers = 3, nstart = 20)
dt_no_rotate[, cluster := km.out$cluster]
plot_cluster(features = dt_no_rotate, xy = dt_xy, nSegments = 5)
set.seed(1) #the following code take a random sample of the segments
features_only <- names(dt_mod)[-(1:4)]
rotation_features <- str_subset(features_only, "Rotation")
dt_no_rotate <- dt_no_rotate[, !(rotation_features), with = F]
km.out <- kmeans(x = scale(dt_no_rotate[, MedianDistanceFromCentre:SumAbsoluteAngles]), centers = 3, nstart = 20)
dt_no_rotate[, cluster := km.out$cluster]
plot_cluster(features = dt_no_rotate, xy = dt_xy, nSegments = 5)
head(dt_no_rotate)
head(dt_no_rotate[, IGRange])
head(dt_no_rotate[, IQRange])
head(dt_no_rotate[, "IQRange"])
head(dt_no_rotate[, .("IQRange")])
head(dt_no_rotate[, .("IQRange"), with = F])
head(dt_no_rotate[, .("IQRange"), with = T])
head(dt_no_rotate[, .(IQRange), with = T])
class(head(dt_no_rotate[, .(IQRange), with = T]))
head(dt_no_rotate[, "IQRange"])
head(dt_no_rotate[, IQRange])
class(head(dt_no_rotate[, IQRange]))
dt
dt[, c("Focus", "Eccentricity")]
a <- c("Focus", "Eccentricity")
dt[ ,a]
dt[ ,a, with = F]
dt[ ,a, with = T]
a <- list(list(a = 5, z = 10), list(z = 2, z = 3))
a
map(a, "z")
library(purrr)
map(a, "z")
a <- list(list(a = 5, z = 10), list(a = 2, z = 3))
map(a, "z")
# INITIALISATION START ===============================================================================================
#start with a clean sheet
rm(list = ls())
#load libraries & sources
setwd("C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting")
source("share_tools.R")
source("initialisation_baltic.R")
params = initialise_params("0")
#root results path
root.plot <-    params$plot.path
root.results <- params$RootPath
hcr.folders = params$hcr.folders
groups.for.f.or.biomass = "f"
setwd("C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting")
print("CreatePercentCatchAboveBelowQuotaTable")
source("Calc_Percent_Catch_Above_Below_Quota.R")
CreatePercentCatchAboveBelowQuotaTable(root.plot, root.results)
root.results
source("initialisation.R")
params = initialise_params("0")
source("initialisation.R")
setwd("C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting")
source("share_tools.R")
source("initialisation.R")
source("initialisation.R")
params = initialise_params("0")
root.plot <-    params$plot.path
root.results <- params$RootPath
hcr.folders = params$hcr.folders
groups.for.f.or.biomass = "f"
setwd("C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting")
print("CreatePercentCatchAboveBelowQuotaTable")
source("Calc_Percent_Catch_Above_Below_Quota.R")
CreatePercentCatchAboveBelowQuotaTable(root.plot, root.results)
debugSource('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Calc_Percent_Catch_Above_Below_Quota.R')
CreatePercentCatchAboveBelowQuotaTable(root.plot, root.results)
igroup
NumberAbove
dt.counts.temp$PercentAbove
quota
quota[StrategyName == "1 CFP_2015 TargetF_Weakest stock"]
igroup
root.results
quota
hcr.quota.targ.file
source("Calc_Mean5YearBiomass_FiveNum_Sum.R")
CreateBiomassFiveNumSum(plot.path = params$plot.path,
area = params$Area)
CreateBiomassFiveNumSum(plot.path = params$plot.path,
area = params$Area)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/share_tools.R')
CreateBiomassFiveNumSum(plot.path = params$plot.path,
area = params$Area)
dt.melted
source("Calc_Catch_Start_End_Ratio.R")
CreateCatchRatioTables(CatchType = "Catch", root.plot, root.results)
CreateCatchRatioTables(CatchType = "Landings", root.plot, root.results)
CreateCatchRatioTables(CatchType = "Discards", root.plot, root.results)
CreateCatchRatioTables(CatchType = "Value", root.plot, root.results)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/share_tools.R')
source("Calc_Catch_Start_End_Ratio.R")
CreateCatchRatioTables(CatchType = "Catch", root.plot, root.results)
source("Calc_Catch_Start_End_Ratio.R")
source("Calc_Catch_Start_End_Ratio.R")
CreateCatchRatioTables(CatchType = "Catch", root.plot, root.results)
CreateCatchRatioTables(CatchType = "Landings", root.plot, root.results)
CreateCatchRatioTables(CatchType = "Discards", root.plot, root.results)
CreateCatchRatioTables(CatchType = "Value", root.plot, root.results)
devtools::use_testthat()
library(devtools)
devtools::use_testthat()
?use_testthat
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R', echo=TRUE)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R', echo=TRUE)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R', echo=TRUE)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R', echo=TRUE)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R', echo=TRUE)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R', echo=TRUE)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R', echo=TRUE)
?cor
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R', echo=TRUE)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R', echo=TRUE)
G
groupdat
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R', echo=TRUE)
isAll(dt = groupdat, col.data.starts = 5, val.to.check = -9999)
head(groupdat)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/share_tools.R', echo=TRUE)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R', echo=TRUE)
dt
data.only
data.only!=val.to.check
val.to.check
sum(data.only!=val.to.check)
data.only!=val.to.check
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R', echo=TRUE)
val.to.check
data.only
all(data.only == -9999)
data.only
tail(data.only)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/removing_last_line_when_incomplete.R', echo=TRUE)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/removing_last_line_when_incomplete.R', echo=TRUE)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R', echo=TRUE)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R', echo=TRUE)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R', echo=TRUE)
getwd()
params$plot.path
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R', echo=TRUE)
source("Plot_Distribution_Last5YearsBiomassMean.R")
setwd("C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/")
source("Plot_Distribution_Last5YearsBiomassMean.R")
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/plotting 15July_2016_ChokeHighestValue_byFleet - Refactor.R', echo=TRUE)
source('C:/Users/Mark/Desktop/Desktop etc/GAP/MSE_Plugin_Results_Plotting/Create_all_tables.R', echo=TRUE)
